//// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zededa/terraform-provider/client"
	"github.com/zededa/terraform-provider/client/resource_group_status"
	zschema "github.com/zededa/terraform-provider/schemas"
)

/*
ResourceGroupStatus resource group status API
*/

func ResourceGroupStatus() *schema.Resource {
	return &schema.Resource{
		/*
			ReadContext: GetResourceGroupStatusById,
			ReadContext: GetResourceGroupStatusByName,
			ReadContext: QueryResourceGroupStatus,
		*/
		Schema: zschema.ResourceGroupStatusSchema(),
	}
}

func DataResourceResourceGroupStatus() *schema.Resource {
	return &schema.Resource{
		Schema: zschema.ResourceGroupStatusSchema(),
	}
}

func GetResourceGroupStatusById(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := resource_group_status.NewGetResourceGroupStatusByIDParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.ResourceGroupStatus.GetResourceGroupStatusByID(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetResourceGroupStatusResourceData(d, respModel)

	return diags
}

func GetResourceGroupStatusByName(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := resource_group_status.NewGetResourceGroupStatusByNameParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	nameVal, nameIsSet := d.GetOk("name")
	if nameIsSet {
		params.Name = nameVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: name")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.ResourceGroupStatus.GetResourceGroupStatusByName(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetResourceGroupStatusResourceData(d, respModel)

	return diags
}

func QueryResourceGroupStatus(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := resource_group_status.NewQueryResourceGroupStatusParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	filterNamePatternVal, filterNamePatternIsSet := d.GetOk("filter_name_pattern")
	if filterNamePatternIsSet {
		params.FilterNamePattern = filterNamePatternVal.(*string)
	}

	filterStatusVal, filterStatusIsSet := d.GetOk("filter_status")
	if filterStatusIsSet {
		params.FilterStatus = filterStatusVal.(*string)
	}

	nextOrderByVal, nextOrderByIsSet := d.GetOk("next_order_by")
	if nextOrderByIsSet {
		params.NextOrderBy = nextOrderByVal.(*string)
	}

	nextPageNumVal, nextPageNumIsSet := d.GetOk("next_page_num")
	if nextPageNumIsSet {
		params.NextPageNum = nextPageNumVal.(*int64)
	}

	nextPageSizeVal, nextPageSizeIsSet := d.GetOk("next_page_size")
	if nextPageSizeIsSet {
		params.NextPageSize = nextPageSizeVal.(*int64)
	}

	nextPageTokenVal, nextPageTokenIsSet := d.GetOk("next_page_token")
	if nextPageTokenIsSet {
		params.NextPageToken = nextPageTokenVal.(*string)
	}

	nextTotalPagesVal, nextTotalPagesIsSet := d.GetOk("next_total_pages")
	if nextTotalPagesIsSet {
		params.NextTotalPages = nextTotalPagesVal.(*int64)
	}

	summaryVal, summaryIsSet := d.GetOk("summary")
	if summaryIsSet {
		params.Summary = summaryVal.(*bool)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.ResourceGroupStatus.QueryResourceGroupStatus(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetResourceGroupStatusResourceData(d, respModel)

	return diags
}
