//// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"log"
	"os"
	"strconv"

	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zededa/terraform-provider/client"
	apiclient "github.com/zededa/terraform-provider/client"
	"github.com/zededa/terraform-provider/client/resource_group"
	"github.com/zededa/terraform-provider/resources/utils"
	zschema "github.com/zededa/terraform-provider/schemas"
)

/*
ResourceGroup resource group API
*/

func ResourceGroup() *schema.Resource {
	return &schema.Resource{
		/*
			CreateContext: CreateResourceGroup,
			DeleteContext: DeleteResourceGroup,
			ReadContext: GetResourceGroup,
			ReadContext: GetResourceGroupByName,
			ReadContext: GetResourceGroupEvents,
			ReadContext: GetResourceGroupEventsByName,
			ReadContext: GetResourceGroupResourceMetricsById,
			ReadContext: GetResourceGroupResourceMetricsByName,
			ReadContext: QueryResourceGroups,
			UpdateContext: UpdateResourceGroup,
		*/
		Schema: zschema.ResourceGroupSchema(),
	}
}

func DataResourceResourceGroup() *schema.Resource {
	return &schema.Resource{
		Schema: zschema.ResourceGroupSchema(),
	}
}

func CreateResourceGroup(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	model := zschema.ResourceGroupModel(d)
	params := resource_group.NewCreateResourceGroupParams()
	params.SetBody(model)

	client := m.(*client.Zedcloudapi)

	resp, err := client.ResourceGroup.CreateResourceGroup(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetResourceGroupResourceData(d, respModel)
	d.SetId(strconv.Itoa(int(resp.Payload.ID)))

	return diags
}

func DeleteResourceGroup(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := resource_group.NewDeleteResourceGroupParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*apiclient.Zedcloudapi)

	resp, err := client.ResourceGroup.DeleteResourceGroup(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	d.SetId("")
	return diags
}

func GetResourceGroup(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := resource_group.NewGetResourceGroupParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.ResourceGroup.GetResourceGroup(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetResourceGroupResourceData(d, respModel)

	return diags
}

func GetResourceGroupByName(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := resource_group.NewGetResourceGroupByNameParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	nameVal, nameIsSet := d.GetOk("name")
	if nameIsSet {
		params.Name = nameVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: name")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.ResourceGroup.GetResourceGroupByName(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetResourceGroupResourceData(d, respModel)

	return diags
}

func GetResourceGroupEvents(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := resource_group.NewGetResourceGroupEventsParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	objidVal, objidIsSet := d.GetOk("objid")
	if objidIsSet {
		params.Objid = objidVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: objid")...)
		return diags
	}

	objnameVal, objnameIsSet := d.GetOk("objname")
	if objnameIsSet {
		params.Objname = objnameVal.(*string)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.ResourceGroup.GetResourceGroupEvents(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetResourceGroupResourceData(d, respModel)

	return diags
}

func GetResourceGroupEventsByName(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := resource_group.NewGetResourceGroupEventsByNameParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	objidVal, objidIsSet := d.GetOk("objid")
	if objidIsSet {
		params.Objid = objidVal.(*string)
	}

	objnameVal, objnameIsSet := d.GetOk("objname")
	if objnameIsSet {
		params.Objname = objnameVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: objname")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.ResourceGroup.GetResourceGroupEventsByName(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetResourceGroupResourceData(d, respModel)

	return diags
}

func GetResourceGroupResourceMetricsById(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := resource_group.NewGetResourceGroupResourceMetricsByIDParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	endTimeVal, endTimeIsSet := d.GetOk("end_time")
	if endTimeIsSet {
		params.EndTime = endTimeVal.(*strfmt.DateTime)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	intervalVal, intervalIsSet := d.GetOk("interval")
	if intervalIsSet {
		params.Interval = intervalVal.(*strfmt.DateTime)
	}

	mTypeVal, mTypeIsSet := d.GetOk("m_type")
	if mTypeIsSet {
		params.MType = mTypeVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: mType")...)
		return diags
	}

	objidVal, objidIsSet := d.GetOk("objid")
	if objidIsSet {
		params.Objid = objidVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: objid")...)
		return diags
	}

	objnameVal, objnameIsSet := d.GetOk("objname")
	if objnameIsSet {
		params.Objname = objnameVal.(*string)
	}

	objtypeVal, objtypeIsSet := d.GetOk("objtype")
	if objtypeIsSet {
		params.Objtype = objtypeVal.(*string)
	}

	startTimeVal, startTimeIsSet := d.GetOk("start_time")
	if startTimeIsSet {
		params.StartTime = startTimeVal.(*strfmt.DateTime)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.ResourceGroup.GetResourceGroupResourceMetricsByID(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetResourceGroupResourceData(d, respModel)

	return diags
}

func GetResourceGroupResourceMetricsByName(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := resource_group.NewGetResourceGroupResourceMetricsByNameParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	endTimeVal, endTimeIsSet := d.GetOk("end_time")
	if endTimeIsSet {
		params.EndTime = endTimeVal.(*strfmt.DateTime)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	intervalVal, intervalIsSet := d.GetOk("interval")
	if intervalIsSet {
		params.Interval = intervalVal.(*strfmt.DateTime)
	}

	mTypeVal, mTypeIsSet := d.GetOk("m_type")
	if mTypeIsSet {
		params.MType = mTypeVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: mType")...)
		return diags
	}

	objidVal, objidIsSet := d.GetOk("objid")
	if objidIsSet {
		params.Objid = objidVal.(*string)
	}

	objnameVal, objnameIsSet := d.GetOk("objname")
	if objnameIsSet {
		params.Objname = objnameVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: objname")...)
		return diags
	}

	objtypeVal, objtypeIsSet := d.GetOk("objtype")
	if objtypeIsSet {
		params.Objtype = objtypeVal.(*string)
	}

	startTimeVal, startTimeIsSet := d.GetOk("start_time")
	if startTimeIsSet {
		params.StartTime = startTimeVal.(*strfmt.DateTime)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.ResourceGroup.GetResourceGroupResourceMetricsByName(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetResourceGroupResourceData(d, respModel)

	return diags
}

func QueryResourceGroups(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := resource_group.NewQueryResourceGroupsParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	filterNamePatternVal, filterNamePatternIsSet := d.GetOk("filter_name_pattern")
	if filterNamePatternIsSet {
		params.FilterNamePattern = filterNamePatternVal.(*string)
	}

	filterTypeVal, filterTypeIsSet := d.GetOk("filter_type")
	if filterTypeIsSet {
		params.FilterType = filterTypeVal.(*string)
	}

	nextOrderByVal, nextOrderByIsSet := d.GetOk("next_order_by")
	if nextOrderByIsSet {
		params.NextOrderBy = nextOrderByVal.(*string)
	}

	nextPageNumVal, nextPageNumIsSet := d.GetOk("next_page_num")
	if nextPageNumIsSet {
		params.NextPageNum = nextPageNumVal.(*int64)
	}

	nextPageSizeVal, nextPageSizeIsSet := d.GetOk("next_page_size")
	if nextPageSizeIsSet {
		params.NextPageSize = nextPageSizeVal.(*int64)
	}

	nextPageTokenVal, nextPageTokenIsSet := d.GetOk("next_page_token")
	if nextPageTokenIsSet {
		params.NextPageToken = nextPageTokenVal.(*string)
	}

	nextTotalPagesVal, nextTotalPagesIsSet := d.GetOk("next_total_pages")
	if nextTotalPagesIsSet {
		params.NextTotalPages = nextTotalPagesVal.(*int64)
	}

	summaryVal, summaryIsSet := d.GetOk("summary")
	if summaryIsSet {
		params.Summary = summaryVal.(*bool)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.ResourceGroup.QueryResourceGroups(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetResourceGroupResourceData(d, respModel)

	return diags
}

func UpdateResourceGroup(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	params := resource_group.NewUpdateResourceGroupParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	params.SetBody(zschema.ResourceGroupModel(d))
	// models.Tag

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	props := zschema.GetResourceGroupPropertyFields()
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	// makes a bulk update for all properties that were changed
	client := m.(*client.Zedcloudapi)
	resp, err := client.ResourceGroup.UpdateResourceGroup(
		params,
		httptransport.BearerToken(os.Getenv("API_ACCESS_TOKEN")),
	)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		return append(diags, diag.Errorf("unexpected: %s", err)...)
	}

	responseData := resp.GetPayload()
	if responseData != nil {
		// FIXME
	}

	if errs := GetEdgeNode(ctx, d, m); err != nil {
		return append(diags, errs...)
	}

	d.Partial(false)

	return diags
}
