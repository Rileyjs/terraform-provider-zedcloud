//// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"log"

	"github.com/go-openapi/strfmt"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zededa/terraform-provider/client"
	"github.com/zededa/terraform-provider/client/edge_node_status"
	zschema "github.com/zededa/terraform-provider/schemas"
)

/*
EdgeNodeStatus edge node status API
*/

func EdgeNodeStatus() *schema.Resource {
	return &schema.Resource{
		/*
			ReadContext: GetEdgeNodeEvents,
			ReadContext: GetEdgeNodeEventsByName,
			ReadContext: GetEdgeNodeResourceMetricsById,
			ReadContext: GetEdgeNodeResourceMetricsByName,
			ReadContext: GetEdgeNodeStatus,
			ReadContext: GetEdgeNodeStatusByName,
			ReadContext: QueryEdgeNodeStatus,
		*/
		Schema: zschema.EdgeNodeStatusSchema(),
	}
}

func DataResourceEdgeNodeStatus() *schema.Resource {
	return &schema.Resource{
		Schema: zschema.EdgeNodeStatusSchema(),
	}
}

func GetEdgeNodeEvents(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := edge_node_status.NewGetEdgeNodeEventsParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	objidVal, objidIsSet := d.GetOk("objid")
	if objidIsSet {
		params.Objid = objidVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: objid")...)
		return diags
	}

	objnameVal, objnameIsSet := d.GetOk("objname")
	if objnameIsSet {
		params.Objname = objnameVal.(*string)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.EdgeNodeStatus.GetEdgeNodeEvents(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetEdgeNodeStatusResourceData(d, respModel)

	return diags
}

func GetEdgeNodeEventsByName(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := edge_node_status.NewGetEdgeNodeEventsByNameParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	objidVal, objidIsSet := d.GetOk("objid")
	if objidIsSet {
		params.Objid = objidVal.(*string)
	}

	objnameVal, objnameIsSet := d.GetOk("objname")
	if objnameIsSet {
		params.Objname = objnameVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: objname")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.EdgeNodeStatus.GetEdgeNodeEventsByName(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetEdgeNodeStatusResourceData(d, respModel)

	return diags
}

func GetEdgeNodeResourceMetricsById(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := edge_node_status.NewGetEdgeNodeResourceMetricsByIDParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	endTimeVal, endTimeIsSet := d.GetOk("end_time")
	if endTimeIsSet {
		params.EndTime = endTimeVal.(*strfmt.DateTime)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	intervalVal, intervalIsSet := d.GetOk("interval")
	if intervalIsSet {
		params.Interval = intervalVal.(*strfmt.DateTime)
	}

	mTypeVal, mTypeIsSet := d.GetOk("m_type")
	if mTypeIsSet {
		params.MType = mTypeVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: mType")...)
		return diags
	}

	objidVal, objidIsSet := d.GetOk("objid")
	if objidIsSet {
		params.Objid = objidVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: objid")...)
		return diags
	}

	objnameVal, objnameIsSet := d.GetOk("objname")
	if objnameIsSet {
		params.Objname = objnameVal.(*string)
	}

	objtypeVal, objtypeIsSet := d.GetOk("objtype")
	if objtypeIsSet {
		params.Objtype = objtypeVal.(*string)
	}

	startTimeVal, startTimeIsSet := d.GetOk("start_time")
	if startTimeIsSet {
		params.StartTime = startTimeVal.(*strfmt.DateTime)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.EdgeNodeStatus.GetEdgeNodeResourceMetricsByID(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetEdgeNodeStatusResourceData(d, respModel)

	return diags
}

func GetEdgeNodeResourceMetricsByName(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := edge_node_status.NewGetEdgeNodeResourceMetricsByNameParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	endTimeVal, endTimeIsSet := d.GetOk("end_time")
	if endTimeIsSet {
		params.EndTime = endTimeVal.(*strfmt.DateTime)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	intervalVal, intervalIsSet := d.GetOk("interval")
	if intervalIsSet {
		params.Interval = intervalVal.(*strfmt.DateTime)
	}

	mTypeVal, mTypeIsSet := d.GetOk("m_type")
	if mTypeIsSet {
		params.MType = mTypeVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: mType")...)
		return diags
	}

	objidVal, objidIsSet := d.GetOk("objid")
	if objidIsSet {
		params.Objid = objidVal.(*string)
	}

	objnameVal, objnameIsSet := d.GetOk("objname")
	if objnameIsSet {
		params.Objname = objnameVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: objname")...)
		return diags
	}

	objtypeVal, objtypeIsSet := d.GetOk("objtype")
	if objtypeIsSet {
		params.Objtype = objtypeVal.(*string)
	}

	startTimeVal, startTimeIsSet := d.GetOk("start_time")
	if startTimeIsSet {
		params.StartTime = startTimeVal.(*strfmt.DateTime)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.EdgeNodeStatus.GetEdgeNodeResourceMetricsByName(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetEdgeNodeStatusResourceData(d, respModel)

	return diags
}

func GetEdgeNodeStatus(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := edge_node_status.NewGetEdgeNodeStatusParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.EdgeNodeStatus.GetEdgeNodeStatus(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetEdgeNodeStatusResourceData(d, respModel)

	return diags
}

func GetEdgeNodeStatusByName(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := edge_node_status.NewGetEdgeNodeStatusByNameParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	nameVal, nameIsSet := d.GetOk("name")
	if nameIsSet {
		params.Name = nameVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: name")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.EdgeNodeStatus.GetEdgeNodeStatusByName(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetEdgeNodeStatusResourceData(d, respModel)

	return diags
}

func QueryEdgeNodeStatus(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := edge_node_status.NewQueryEdgeNodeStatusParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	filterLoadVal, filterLoadIsSet := d.GetOk("filter_load")
	if filterLoadIsSet {
		params.FilterLoad = filterLoadVal.(*string)
	}

	filterNamePatternVal, filterNamePatternIsSet := d.GetOk("filter_name_pattern")
	if filterNamePatternIsSet {
		params.FilterNamePattern = filterNamePatternVal.(*string)
	}

	filterProjectNameVal, filterProjectNameIsSet := d.GetOk("filter_project_name")
	if filterProjectNameIsSet {
		params.FilterProjectName = filterProjectNameVal.(*string)
	}

	filterRunStateVal, filterRunStateIsSet := d.GetOk("filter_run_state")
	if filterRunStateIsSet {
		params.FilterRunState = filterRunStateVal.(*string)
	}

	nextOrderByVal, nextOrderByIsSet := d.GetOk("next_order_by")
	if nextOrderByIsSet {
		params.NextOrderBy = nextOrderByVal.(*string)
	}

	nextPageNumVal, nextPageNumIsSet := d.GetOk("next_page_num")
	if nextPageNumIsSet {
		params.NextPageNum = nextPageNumVal.(*int64)
	}

	nextPageSizeVal, nextPageSizeIsSet := d.GetOk("next_page_size")
	if nextPageSizeIsSet {
		params.NextPageSize = nextPageSizeVal.(*int64)
	}

	nextPageTokenVal, nextPageTokenIsSet := d.GetOk("next_page_token")
	if nextPageTokenIsSet {
		params.NextPageToken = nextPageTokenVal.(*string)
	}

	nextTotalPagesVal, nextTotalPagesIsSet := d.GetOk("next_total_pages")
	if nextTotalPagesIsSet {
		params.NextTotalPages = nextTotalPagesVal.(*int64)
	}

	summaryVal, summaryIsSet := d.GetOk("summary")
	if summaryIsSet {
		params.Summary = summaryVal.(*bool)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.EdgeNodeStatus.QueryEdgeNodeStatus(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetEdgeNodeStatusResourceData(d, respModel)

	return diags
}
