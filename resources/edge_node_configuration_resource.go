// // Code generated by go-swagger; DO NOT EDIT.
package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/davecgh/go-spew/spew"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	apiclient "github.com/zededa/terraform-provider/client"
	"github.com/zededa/terraform-provider/client/edge_node_configuration"
	zschema "github.com/zededa/terraform-provider/schemas"
)

/*
EdgeNodeConfiguration edge node configuration API
*/

func EdgeNodeConfiguration() *schema.Resource {
	return &schema.Resource{
		ReadContext:   EdgeNodeConfiguration_GetEdgeNodeByName,
		UpdateContext: EdgeNodeConfiguration_UpdateEdgeNode,
		CreateContext: EdgeNodeConfiguration_CreateEdgeNode,
		DeleteContext: EdgeNodeConfiguration_DeleteEdgeNode,
		Schema:        zschema.DeviceConfigSchema(),
	}
}

func DataResourceEdgeNodeConfiguration() *schema.Resource {
	return &schema.Resource{
		ReadContext: EdgeNodeConfiguration_GetEdgeNodeByName,
		Schema:      zschema.DeviceConfigSchema(),
	}
}

func EdgeNodeConfiguration_CreateEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	model := zschema.DeviceConfigModel(d)
	params := edge_node_configuration.NewEdgeNodeConfigurationCreateEdgeNodeParams()
	params.SetBody(model)

	fmt.Println("---------------------------------------")
	spew.Dump(params)
	fmt.Println("---------------------------------------")
	return nil

	client := m.(*apiclient.Zedcloudapi)

	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationCreateEdgeNode(params, nil)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	responseData := resp.GetPayload()
	if responseData != nil && len(responseData.Error) > 0 {
		for _, err := range responseData.Error {
			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
		}
		return diags
	}

	// the zedcloud API does not return the partially updated object but a custom response.
	// thus, we need to fetch the object and populate the state.
	if errs := EdgeNodeConfiguration_GetEdgeNodeByName(ctx, d, m); err != nil {
		return append(diags, errs...)
	}

	return diags
}

func EdgeNodeConfiguration_GetEdgeNodeByName(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := edge_node_configuration.NewEdgeNodeConfigurationGetEdgeNodeByNameParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	nameVal, nameIsSet := d.GetOk("name")
	if nameIsSet {
		params.Name = nameVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: name")...)
		return diags
	}

	client := m.(*apiclient.Zedcloudapi)

	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationGetEdgeNodeByName(params, nil)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		return append(diags, diag.Errorf("unexpected: %s", err)...)
	}

	respModel := resp.GetPayload()
	zschema.SetDeviceConfigResourceData(d, respModel)

	return diags
}

func EdgeNodeConfiguration_UpdateEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	params := edge_node_configuration.NewEdgeNodeConfigurationUpdateEdgeNodeParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	params.SetBody(zschema.DeviceConfigModel(d))

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	// props := zschema.GetEdgeNodeConfigurationPropertyFields()
	// for _, v := range props {
	// 	if d.HasChange(v) {
	// 	} else {
	// 		props = utils.Remove(props, v)
	// 	}
	// }

	// makes a bulk update for all properties that were changed
	client := m.(*apiclient.Zedcloudapi)
	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationUpdateEdgeNode(params, nil)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		return append(diags, diag.Errorf("unexpected: %s", err)...)
	}

	responseData := resp.GetPayload()
	if responseData != nil && len(responseData.Error) > 0 {
		for _, err := range responseData.Error {
			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
		}
		return diags
	}

	// the zedcloud API does not return the partially updated object but a custom response.
	// thus, we need to fetch the object and populate the state.
	if errs := EdgeNodeConfiguration_GetEdgeNodeByName(ctx, d, m); err != nil {
		return append(diags, errs...)
	}

	d.Partial(false)

	return diags
}

// func EdgeNodeConfiguration_GetDeviceInterfaceTags(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics

// 	params := edge_node_configuration.NewEdgeNodeConfigurationGetDeviceInterfaceTagsParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	filterObjIdVal, filterObjIdIsSet := d.GetOk("filter_obj_id")
// 	if filterObjIdIsSet {
// 		params.FilterObjID = filterObjIdVal.(*string)
// 	}

// 	filterObjNameVal, filterObjNameIsSet := d.GetOk("filter_obj_name")
// 	if filterObjNameIsSet {
// 		params.FilterObjName = filterObjNameVal.(*string)
// 	}

// 	nextOrderByVal, nextOrderByIsSet := d.GetOk("next_order_by")
// 	if nextOrderByIsSet {
// 		params.NextOrderBy = nextOrderByVal.([]string)
// 	}

// 	nextPageNumVal, nextPageNumIsSet := d.GetOk("next_page_num")
// 	if nextPageNumIsSet {
// 		params.NextPageNum = nextPageNumVal.(*int64)
// 	}

// 	nextPageSizeVal, nextPageSizeIsSet := d.GetOk("next_page_size")
// 	if nextPageSizeIsSet {
// 		params.NextPageSize = nextPageSizeVal.(*int64)
// 	}

// 	nextPageTokenVal, nextPageTokenIsSet := d.GetOk("next_page_token")
// 	if nextPageTokenIsSet {
// 		params.NextPageToken = nextPageTokenVal.(*string)
// 	}

// 	nextTotalPagesVal, nextTotalPagesIsSet := d.GetOk("next_total_pages")
// 	if nextTotalPagesIsSet {
// 		params.NextTotalPages = nextTotalPagesVal.(*int64)
// 	}

// 	client := m.(*apiclient.Zedcloudapi)

// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationGetDeviceInterfaceTags(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	respModel := resp.GetPayload()
// 	zschema.SetDeviceConfigResourceData(d, respModel)

// 	return diags
// }

// func EdgeNodeConfiguration_GetEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics

// 	params := edge_node_configuration.NewEdgeNodeConfigurationGetEdgeNodeParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	client := m.(*apiclient.Zedcloudapi)

// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationGetEdgeNode(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	respModel := resp.GetPayload()
// 	zschema.SetDeviceConfigResourceData(d, respModel)

// 	return diags
// }

// func EdgeNodeConfiguration_GetEdgeNodeAttestation(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics

// 	params := edge_node_configuration.NewEdgeNodeConfigurationGetEdgeNodeAttestationParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	client := m.(*apiclient.Zedcloudapi)

// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationGetEdgeNodeAttestation(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	respModel := resp.GetPayload()
// 	zschema.SetDeviceConfigResourceData(d, respModel)

// 	return diags
// }

// func EdgeNodeConfiguration_GetEdgeNodeBySerial(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics

// 	params := edge_node_configuration.NewEdgeNodeConfigurationGetEdgeNodeBySerialParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	serialnoVal, serialnoIsSet := d.GetOk("serialno")
// 	if serialnoIsSet {
// 		params.Serialno = serialnoVal.(string)
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: serialno")...)
// 		return diags
// 	}

// 	client := m.(*apiclient.Zedcloudapi)

// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationGetEdgeNodeBySerial(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	respModel := resp.GetPayload()
// 	zschema.SetDeviceConfigResourceData(d, respModel)

// 	return diags
// }

// func EdgeNodeConfiguration_GetEdgeNodeOnboarding(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics

// 	params := edge_node_configuration.NewEdgeNodeConfigurationGetEdgeNodeOnboardingParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	client := m.(*apiclient.Zedcloudapi)

// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationGetEdgeNodeOnboarding(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	respModel := resp.GetPayload()
// 	zschema.SetDeviceConfigResourceData(d, respModel)

// 	return diags
// }

// func EdgeNodeConfiguration_GetEdgeviewClientScript(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics

// 	params := edge_node_configuration.NewEdgeNodeConfigurationGetEdgeviewClientScriptParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	client := m.(*apiclient.Zedcloudapi)

// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationGetEdgeviewClientScript(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	respModel := resp.GetPayload()
// 	zschema.SetDeviceConfigResourceData(d, respModel)

// 	return diags
// }

// func EdgeNodeConfiguration_QueryEdgeNodes(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics

// 	params := edge_node_configuration.NewEdgeNodeConfigurationQueryEdgeNodesParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	fieldsVal, fieldsIsSet := d.GetOk("fields")
// 	if fieldsIsSet {
// 		params.Fields = fieldsVal.([]string)
// 	}

// 	summaryVal, summaryIsSet := d.GetOk("summary")
// 	if summaryIsSet {
// 		params.Summary = summaryVal.(*bool)
// 	}

// 	client := m.(*apiclient.Zedcloudapi)

// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationQueryEdgeNodes(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	respModel := resp.GetPayload()
// 	zschema.SetDeviceConfigResourceData(d, respModel)

// 	return diags
// }

// func EdgeNodeConfiguration_ActivateEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_node_configuration.NewEdgeNodeConfigurationActivateEdgeNodeParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
// 	props := zschema.GetEdgeNodeConfigurationPropertyFields()
// 	for _, v := range props {
// 		if d.HasChange(v) {
// 		} else {
// 			props = utils.Remove(props, v)
// 		}
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationActivateEdgeNode(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeNodeConfiguration_BaseOsUpgradeRetryEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_node_configuration.NewEdgeNodeConfigurationBaseOsUpgradeRetryEdgeNodeParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
// 	props := zschema.GetEdgeNodeConfigurationPropertyFields()
// 	for _, v := range props {
// 		if d.HasChange(v) {
// 		} else {
// 			props = utils.Remove(props, v)
// 		}
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationBaseOsUpgradeRetryEdgeNode(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeNodeConfiguration_DeActivateEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_node_configuration.NewEdgeNodeConfigurationDeActivateEdgeNodeParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
// 	props := zschema.GetEdgeNodeConfigurationPropertyFields()
// 	for _, v := range props {
// 		if d.HasChange(v) {
// 		} else {
// 			props = utils.Remove(props, v)
// 		}
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationDeActivateEdgeNode(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeNodeConfiguration_Offboard(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_node_configuration.NewEdgeNodeConfigurationOffboardParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
// 	props := zschema.GetEdgeNodeConfigurationPropertyFields()
// 	for _, v := range props {
// 		if d.HasChange(v) {
// 		} else {
// 			props = utils.Remove(props, v)
// 		}
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationOffboard(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeNodeConfiguration_PreparePowerOff(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_node_configuration.NewEdgeNodeConfigurationPreparePowerOffParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
// 	props := zschema.GetEdgeNodeConfigurationPropertyFields()
// 	for _, v := range props {
// 		if d.HasChange(v) {
// 		} else {
// 			props = utils.Remove(props, v)
// 		}
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationPreparePowerOff(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeNodeConfiguration_Reboot(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_node_configuration.NewEdgeNodeConfigurationRebootParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
// 	props := zschema.GetEdgeNodeConfigurationPropertyFields()
// 	for _, v := range props {
// 		if d.HasChange(v) {
// 		} else {
// 			props = utils.Remove(props, v)
// 		}
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationReboot(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeNodeConfiguration_StartDebugEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_node_configuration.NewEdgeNodeConfigurationStartDebugEdgeNodeParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	params.SetBody(zschema.EdgeNodeConfigurationModel(d))
// 	// EdgeNodeConfigurationStartDebugEdgeNodeBody

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
// 	props := zschema.GetEdgeNodeConfigurationPropertyFields()
// 	for _, v := range props {
// 		if d.HasChange(v) {
// 		} else {
// 			props = utils.Remove(props, v)
// 		}
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationStartDebugEdgeNode(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeNodeConfiguration_StartEdgeviewEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_node_configuration.NewEdgeNodeConfigurationStartEdgeviewEdgeNodeParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	params.SetBody(zschema.EdgeNodeConfigurationModel(d))
// 	// EdgeNodeConfigurationStartEdgeviewEdgeNodeBody

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
// 	props := zschema.GetEdgeNodeConfigurationPropertyFields()
// 	for _, v := range props {
// 		if d.HasChange(v) {
// 		} else {
// 			props = utils.Remove(props, v)
// 		}
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationStartEdgeviewEdgeNode(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeNodeConfiguration_StopDebugEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_node_configuration.NewEdgeNodeConfigurationStopDebugEdgeNodeParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
// 	props := zschema.GetEdgeNodeConfigurationPropertyFields()
// 	for _, v := range props {
// 		if d.HasChange(v) {
// 		} else {
// 			props = utils.Remove(props, v)
// 		}
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationStopDebugEdgeNode(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeNodeConfiguration_StopEdgeviewEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_node_configuration.NewEdgeNodeConfigurationStopEdgeviewEdgeNodeParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
// 	props := zschema.GetEdgeNodeConfigurationPropertyFields()
// 	for _, v := range props {
// 		if d.HasChange(v) {
// 		} else {
// 			props = utils.Remove(props, v)
// 		}
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationStopEdgeviewEdgeNode(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeNodeConfiguration_UpdateEdgeNodeBaseOS(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_node_configuration.NewEdgeNodeConfigurationUpdateEdgeNodeBaseOSParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
// 	props := zschema.GetEdgeNodeConfigurationPropertyFields()
// 	for _, v := range props {
// 		if d.HasChange(v) {
// 		} else {
// 			props = utils.Remove(props, v)
// 		}
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationUpdateEdgeNodeBaseOS(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeNodeConfiguration_UpdateEdgeNodeBaseOS2(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_node_configuration.NewEdgeNodeConfigurationUpdateEdgeNodeBaseOS2Params()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
// 	props := zschema.GetEdgeNodeConfigurationPropertyFields()
// 	for _, v := range props {
// 		if d.HasChange(v) {
// 		} else {
// 			props = utils.Remove(props, v)
// 		}
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationUpdateEdgeNodeBaseOS2(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeNodeConfiguration_UpdateEdgeNodeBaseOS3(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_node_configuration.NewEdgeNodeConfigurationUpdateEdgeNodeBaseOS3Params()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
// 	props := zschema.GetEdgeNodeConfigurationPropertyFields()
// 	for _, v := range props {
// 		if d.HasChange(v) {
// 		} else {
// 			props = utils.Remove(props, v)
// 		}
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationUpdateEdgeNodeBaseOS3(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

func EdgeNodeConfiguration_DeleteEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := edge_node_configuration.NewEdgeNodeConfigurationDeleteEdgeNodeParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*apiclient.Zedcloudapi)

	resp, err := client.EdgeNodeConfiguration.EdgeNodeConfigurationDeleteEdgeNode(params, nil)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	d.SetId("")
	return diags
}
