//// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"log"
	"os"
	"strconv"

	httptransport "github.com/go-openapi/runtime/client"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zededa/terraform-provider/client"
	apiclient "github.com/zededa/terraform-provider/client"
	"github.com/zededa/terraform-provider/client/hardware_model"
	"github.com/zededa/terraform-provider/resources/utils"
	zschema "github.com/zededa/terraform-provider/schemas"
)

/*
HardwareModel hardware model API
*/

func HardwareModel() *schema.Resource {
	return &schema.Resource{
		/*
			CreateContext: CreateHardwareBrand,
			CreateContext: CreateHardwareModel,
			DeleteContext: DeleteHardwareBrand,
			DeleteContext: DeleteHardwareModel,
			ReadContext: GetDeviceTags,
			ReadContext: GetGlobalHardwareBrand,
			ReadContext: GetGlobalHardwareBrandByName,
			ReadContext: GetGlobalHardwareModel,
			ReadContext: GetGlobalHardwareModelByName,
			ReadContext: GetHardwareBrand,
			ReadContext: GetHardwareBrandByName,
			ReadContext: GetHardwareModel,
			ReadContext: GetHardwareModelByName,
			ReadContext: QueryGlobalHardwareBrands,
			ReadContext: QueryGlobalHardwareModels,
			ReadContext: QueryHardwareBrands,
			ReadContext: QueryHardwareModels,
			UpdateContext: UpdateHardwareBrand,
			UpdateContext: UpdateHardwareModel,
		*/
		Schema: zschema.HardwareModelSchema(),
	}
}

func DataResourceHardwareModel() *schema.Resource {
	return &schema.Resource{
		Schema: zschema.HardwareModelSchema(),
	}
}

func CreateHardwareBrand(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	model := zschema.HardwareModelModel(d)
	params := hardware_model.NewCreateHardwareBrandParams()
	params.SetBody(model)

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.CreateHardwareBrand(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)
	d.SetId(strconv.Itoa(int(resp.Payload.ID)))

	return diags
}

func CreateHardwareModel(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	model := zschema.HardwareModelModel(d)
	params := hardware_model.NewCreateHardwareModelParams()
	params.SetBody(model)

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.CreateHardwareModel(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)
	d.SetId(strconv.Itoa(int(resp.Payload.ID)))

	return diags
}

func DeleteHardwareBrand(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewDeleteHardwareBrandParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*apiclient.Zedcloudapi)

	resp, err := client.HardwareModel.DeleteHardwareBrand(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	d.SetId("")
	return diags
}

func DeleteHardwareModel(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewDeleteHardwareModelParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*apiclient.Zedcloudapi)

	resp, err := client.HardwareModel.DeleteHardwareModel(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	d.SetId("")
	return diags
}

func GetDeviceTags(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewGetDeviceTagsParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	filterObjIdVal, filterObjIdIsSet := d.GetOk("filter_obj_id")
	if filterObjIdIsSet {
		params.FilterObjID = filterObjIdVal.(*string)
	}

	filterObjNameVal, filterObjNameIsSet := d.GetOk("filter_obj_name")
	if filterObjNameIsSet {
		params.FilterObjName = filterObjNameVal.(*string)
	}

	nextOrderByVal, nextOrderByIsSet := d.GetOk("next_order_by")
	if nextOrderByIsSet {
		params.NextOrderBy = nextOrderByVal.(*string)
	}

	nextPageNumVal, nextPageNumIsSet := d.GetOk("next_page_num")
	if nextPageNumIsSet {
		params.NextPageNum = nextPageNumVal.(*int64)
	}

	nextPageSizeVal, nextPageSizeIsSet := d.GetOk("next_page_size")
	if nextPageSizeIsSet {
		params.NextPageSize = nextPageSizeVal.(*int64)
	}

	nextPageTokenVal, nextPageTokenIsSet := d.GetOk("next_page_token")
	if nextPageTokenIsSet {
		params.NextPageToken = nextPageTokenVal.(*string)
	}

	nextTotalPagesVal, nextTotalPagesIsSet := d.GetOk("next_total_pages")
	if nextTotalPagesIsSet {
		params.NextTotalPages = nextTotalPagesVal.(*int64)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.GetDeviceTags(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)

	return diags
}

func GetGlobalHardwareBrand(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewGetGlobalHardwareBrandParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.GetGlobalHardwareBrand(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)

	return diags
}

func GetGlobalHardwareBrandByName(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewGetGlobalHardwareBrandByNameParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	nameVal, nameIsSet := d.GetOk("name")
	if nameIsSet {
		params.Name = nameVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: name")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.GetGlobalHardwareBrandByName(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)

	return diags
}

func GetGlobalHardwareModel(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewGetGlobalHardwareModelParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.GetGlobalHardwareModel(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)

	return diags
}

func GetGlobalHardwareModelByName(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewGetGlobalHardwareModelByNameParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	nameVal, nameIsSet := d.GetOk("name")
	if nameIsSet {
		params.Name = nameVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: name")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.GetGlobalHardwareModelByName(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)

	return diags
}

func GetHardwareBrand(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewGetHardwareBrandParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.GetHardwareBrand(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)

	return diags
}

func GetHardwareBrandByName(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewGetHardwareBrandByNameParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	nameVal, nameIsSet := d.GetOk("name")
	if nameIsSet {
		params.Name = nameVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: name")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.GetHardwareBrandByName(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)

	return diags
}

func GetHardwareModel(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewGetHardwareModelParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.GetHardwareModel(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)

	return diags
}

func GetHardwareModelByName(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewGetHardwareModelByNameParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	nameVal, nameIsSet := d.GetOk("name")
	if nameIsSet {
		params.Name = nameVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: name")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.GetHardwareModelByName(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)

	return diags
}

func QueryGlobalHardwareBrands(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewQueryGlobalHardwareBrandsParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	filterNamePatternVal, filterNamePatternIsSet := d.GetOk("filter_name_pattern")
	if filterNamePatternIsSet {
		params.FilterNamePattern = filterNamePatternVal.(*string)
	}

	filterOriginTypeVal, filterOriginTypeIsSet := d.GetOk("filter_origin_type")
	if filterOriginTypeIsSet {
		params.FilterOriginType = filterOriginTypeVal.(*string)
	}

	nextOrderByVal, nextOrderByIsSet := d.GetOk("next_order_by")
	if nextOrderByIsSet {
		params.NextOrderBy = nextOrderByVal.(*string)
	}

	nextPageNumVal, nextPageNumIsSet := d.GetOk("next_page_num")
	if nextPageNumIsSet {
		params.NextPageNum = nextPageNumVal.(*int64)
	}

	nextPageSizeVal, nextPageSizeIsSet := d.GetOk("next_page_size")
	if nextPageSizeIsSet {
		params.NextPageSize = nextPageSizeVal.(*int64)
	}

	nextPageTokenVal, nextPageTokenIsSet := d.GetOk("next_page_token")
	if nextPageTokenIsSet {
		params.NextPageToken = nextPageTokenVal.(*string)
	}

	nextTotalPagesVal, nextTotalPagesIsSet := d.GetOk("next_total_pages")
	if nextTotalPagesIsSet {
		params.NextTotalPages = nextTotalPagesVal.(*int64)
	}

	summaryVal, summaryIsSet := d.GetOk("summary")
	if summaryIsSet {
		params.Summary = summaryVal.(*bool)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.QueryGlobalHardwareBrands(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)

	return diags
}

func QueryGlobalHardwareModels(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewQueryGlobalHardwareModelsParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	filterBrandIdVal, filterBrandIdIsSet := d.GetOk("filter_brand_id")
	if filterBrandIdIsSet {
		params.FilterBrandID = filterBrandIdVal.(*string)
	}

	filterNamePatternVal, filterNamePatternIsSet := d.GetOk("filter_name_pattern")
	if filterNamePatternIsSet {
		params.FilterNamePattern = filterNamePatternVal.(*string)
	}

	filterOriginTypeVal, filterOriginTypeIsSet := d.GetOk("filter_origin_type")
	if filterOriginTypeIsSet {
		params.FilterOriginType = filterOriginTypeVal.(*string)
	}

	nextOrderByVal, nextOrderByIsSet := d.GetOk("next_order_by")
	if nextOrderByIsSet {
		params.NextOrderBy = nextOrderByVal.(*string)
	}

	nextPageNumVal, nextPageNumIsSet := d.GetOk("next_page_num")
	if nextPageNumIsSet {
		params.NextPageNum = nextPageNumVal.(*int64)
	}

	nextPageSizeVal, nextPageSizeIsSet := d.GetOk("next_page_size")
	if nextPageSizeIsSet {
		params.NextPageSize = nextPageSizeVal.(*int64)
	}

	nextPageTokenVal, nextPageTokenIsSet := d.GetOk("next_page_token")
	if nextPageTokenIsSet {
		params.NextPageToken = nextPageTokenVal.(*string)
	}

	nextTotalPagesVal, nextTotalPagesIsSet := d.GetOk("next_total_pages")
	if nextTotalPagesIsSet {
		params.NextTotalPages = nextTotalPagesVal.(*int64)
	}

	summaryVal, summaryIsSet := d.GetOk("summary")
	if summaryIsSet {
		params.Summary = summaryVal.(*bool)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.QueryGlobalHardwareModels(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)

	return diags
}

func QueryHardwareBrands(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewQueryHardwareBrandsParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	enterpriseIdVal, enterpriseIdIsSet := d.GetOk("enterprise_id")
	if enterpriseIdIsSet {
		params.EnterpriseID = enterpriseIdVal.(*string)
	}

	filterNamePatternVal, filterNamePatternIsSet := d.GetOk("filter_name_pattern")
	if filterNamePatternIsSet {
		params.FilterNamePattern = filterNamePatternVal.(*string)
	}

	filterOriginTypeVal, filterOriginTypeIsSet := d.GetOk("filter_origin_type")
	if filterOriginTypeIsSet {
		params.FilterOriginType = filterOriginTypeVal.(*string)
	}

	nextOrderByVal, nextOrderByIsSet := d.GetOk("next_order_by")
	if nextOrderByIsSet {
		params.NextOrderBy = nextOrderByVal.(*string)
	}

	nextPageNumVal, nextPageNumIsSet := d.GetOk("next_page_num")
	if nextPageNumIsSet {
		params.NextPageNum = nextPageNumVal.(*int64)
	}

	nextPageSizeVal, nextPageSizeIsSet := d.GetOk("next_page_size")
	if nextPageSizeIsSet {
		params.NextPageSize = nextPageSizeVal.(*int64)
	}

	nextPageTokenVal, nextPageTokenIsSet := d.GetOk("next_page_token")
	if nextPageTokenIsSet {
		params.NextPageToken = nextPageTokenVal.(*string)
	}

	nextTotalPagesVal, nextTotalPagesIsSet := d.GetOk("next_total_pages")
	if nextTotalPagesIsSet {
		params.NextTotalPages = nextTotalPagesVal.(*int64)
	}

	summaryVal, summaryIsSet := d.GetOk("summary")
	if summaryIsSet {
		params.Summary = summaryVal.(*bool)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.QueryHardwareBrands(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)

	return diags
}

func QueryHardwareModels(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := hardware_model.NewQueryHardwareModelsParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	filterBrandIdVal, filterBrandIdIsSet := d.GetOk("filter_brand_id")
	if filterBrandIdIsSet {
		params.FilterBrandID = filterBrandIdVal.(*string)
	}

	filterNamePatternVal, filterNamePatternIsSet := d.GetOk("filter_name_pattern")
	if filterNamePatternIsSet {
		params.FilterNamePattern = filterNamePatternVal.(*string)
	}

	filterOriginTypeVal, filterOriginTypeIsSet := d.GetOk("filter_origin_type")
	if filterOriginTypeIsSet {
		params.FilterOriginType = filterOriginTypeVal.(*string)
	}

	nextOrderByVal, nextOrderByIsSet := d.GetOk("next_order_by")
	if nextOrderByIsSet {
		params.NextOrderBy = nextOrderByVal.(*string)
	}

	nextPageNumVal, nextPageNumIsSet := d.GetOk("next_page_num")
	if nextPageNumIsSet {
		params.NextPageNum = nextPageNumVal.(*int64)
	}

	nextPageSizeVal, nextPageSizeIsSet := d.GetOk("next_page_size")
	if nextPageSizeIsSet {
		params.NextPageSize = nextPageSizeVal.(*int64)
	}

	nextPageTokenVal, nextPageTokenIsSet := d.GetOk("next_page_token")
	if nextPageTokenIsSet {
		params.NextPageToken = nextPageTokenVal.(*string)
	}

	nextTotalPagesVal, nextTotalPagesIsSet := d.GetOk("next_total_pages")
	if nextTotalPagesIsSet {
		params.NextTotalPages = nextTotalPagesVal.(*int64)
	}

	summaryVal, summaryIsSet := d.GetOk("summary")
	if summaryIsSet {
		params.Summary = summaryVal.(*bool)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.HardwareModel.QueryHardwareModels(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetHardwareModelResourceData(d, respModel)

	return diags
}

func UpdateHardwareBrand(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	params := hardware_model.NewUpdateHardwareBrandParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	params.SetBody(zschema.HardwareModelModel(d))
	// models.SysBrand

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	props := zschema.GetHardwareModelPropertyFields()
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	// makes a bulk update for all properties that were changed
	client := m.(*client.Zedcloudapi)
	resp, err := client.HardwareModel.UpdateHardwareBrand(
		params,
		httptransport.BearerToken(os.Getenv("API_ACCESS_TOKEN")),
	)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		return append(diags, diag.Errorf("unexpected: %s", err)...)
	}

	responseData := resp.GetPayload()
	if responseData != nil {
		// FIXME
	}

	if errs := GetEdgeNode(ctx, d, m); err != nil {
		return append(diags, errs...)
	}

	d.Partial(false)

	return diags
}

func UpdateHardwareModel(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	params := hardware_model.NewUpdateHardwareModelParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	params.SetBody(zschema.HardwareModelModel(d))
	// models.SysModel

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	props := zschema.GetHardwareModelPropertyFields()
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	// makes a bulk update for all properties that were changed
	client := m.(*client.Zedcloudapi)
	resp, err := client.HardwareModel.UpdateHardwareModel(
		params,
		httptransport.BearerToken(os.Getenv("API_ACCESS_TOKEN")),
	)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		return append(diags, diag.Errorf("unexpected: %s", err)...)
	}

	responseData := resp.GetPayload()
	if responseData != nil {
		// FIXME
	}

	if errs := GetEdgeNode(ctx, d, m); err != nil {
		return append(diags, errs...)
	}

	d.Partial(false)

	return diags
}
