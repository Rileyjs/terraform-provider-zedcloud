//// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"log"
	"os"
	"strconv"

	httptransport "github.com/go-openapi/runtime/client"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/zededa/terraform-provider/client"
	apiclient "github.com/zededa/terraform-provider/client"
	"github.com/zededa/terraform-provider/client/device_config"
	"github.com/zededa/terraform-provider/resources/utils"
	zschema "github.com/zededa/terraform-provider/schemas"
)

/*
DeviceConfig device config API
*/

func DeviceConfig() *schema.Resource {
	return &schema.Resource{
		/*
			UpdateContext: ActivateEdgeNode,
			CreateContext: CreateEdgeNode,
			UpdateContext: DeActivateEdgeNode,
			DeleteContext: DeleteEdgeNode,
			ReadContext: GetEdgeNode,
			ReadContext: GetEdgeNodeAttestation,
			ReadContext: GetEdgeNodeByName,
			ReadContext: GetEdgeNodeBySerial,
			ReadContext: GetEdgeNodeOnboarding,
			UpdateContext: Offboard,
			ReadContext: QueryEdgeNodes,
			UpdateContext: Reboot,
			UpdateContext: UpdateEdgeNode,
			UpdateContext: UpdateEdgeNodeBaseOS,
			UpdateContext: UpdateEdgeNodeBaseOS2,
			UpdateContext: UpdateEdgeNodeBaseOS3,
		*/
		Schema: zschema.DeviceConfigSchema(),
	}
}

func DataResourceDeviceConfig() *schema.Resource {
	return &schema.Resource{
		Schema: zschema.DeviceConfigSchema(),
	}
}

func ActivateEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	params := device_config.NewActivateEdgeNodeParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	props := zschema.GetDeviceConfigPropertyFields()
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	// makes a bulk update for all properties that were changed
	client := m.(*client.Zedcloudapi)
	resp, err := client.DeviceConfig.ActivateEdgeNode(
		params,
		httptransport.BearerToken(os.Getenv("API_ACCESS_TOKEN")),
	)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		return append(diags, diag.Errorf("unexpected: %s", err)...)
	}

	responseData := resp.GetPayload()
	if responseData != nil {
		// FIXME
	}

	if errs := GetEdgeNode(ctx, d, m); err != nil {
		return append(diags, errs...)
	}

	d.Partial(false)

	return diags
}

func CreateEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	model := zschema.DeviceConfigModel(d)
	params := device_config.NewCreateEdgeNodeParams()
	params.SetBody(model)

	client := m.(*client.Zedcloudapi)

	resp, err := client.DeviceConfig.CreateEdgeNode(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetDeviceConfigResourceData(d, respModel)
	d.SetId(strconv.Itoa(int(resp.Payload.ID)))

	return diags
}

func DeActivateEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	params := device_config.NewDeActivateEdgeNodeParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	props := zschema.GetDeviceConfigPropertyFields()
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	// makes a bulk update for all properties that were changed
	client := m.(*client.Zedcloudapi)
	resp, err := client.DeviceConfig.DeActivateEdgeNode(
		params,
		httptransport.BearerToken(os.Getenv("API_ACCESS_TOKEN")),
	)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		return append(diags, diag.Errorf("unexpected: %s", err)...)
	}

	responseData := resp.GetPayload()
	if responseData != nil {
		// FIXME
	}

	if errs := GetEdgeNode(ctx, d, m); err != nil {
		return append(diags, errs...)
	}

	d.Partial(false)

	return diags
}

func DeleteEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := device_config.NewDeleteEdgeNodeParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*apiclient.Zedcloudapi)

	resp, err := client.DeviceConfig.DeleteEdgeNode(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	d.SetId("")
	return diags
}

func GetEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := device_config.NewGetEdgeNodeParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.DeviceConfig.GetEdgeNode(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetDeviceConfigResourceData(d, respModel)

	return diags
}

func GetEdgeNodeAttestation(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := device_config.NewGetEdgeNodeAttestationParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.DeviceConfig.GetEdgeNodeAttestation(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetDeviceConfigResourceData(d, respModel)

	return diags
}

func GetEdgeNodeByName(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := device_config.NewGetEdgeNodeByNameParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	nameVal, nameIsSet := d.GetOk("name")
	if nameIsSet {
		params.Name = nameVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: name")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.DeviceConfig.GetEdgeNodeByName(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetDeviceConfigResourceData(d, respModel)

	return diags
}

func GetEdgeNodeBySerial(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := device_config.NewGetEdgeNodeBySerialParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	serialnoVal, serialnoIsSet := d.GetOk("serialno")
	if serialnoIsSet {
		params.Serialno = serialnoVal.(string)
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: serialno")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.DeviceConfig.GetEdgeNodeBySerial(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetDeviceConfigResourceData(d, respModel)

	return diags
}

func GetEdgeNodeOnboarding(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := device_config.NewGetEdgeNodeOnboardingParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.DeviceConfig.GetEdgeNodeOnboarding(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetDeviceConfigResourceData(d, respModel)

	return diags
}

func Offboard(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	params := device_config.NewOffboardParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	props := zschema.GetDeviceConfigPropertyFields()
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	// makes a bulk update for all properties that were changed
	client := m.(*client.Zedcloudapi)
	resp, err := client.DeviceConfig.Offboard(
		params,
		httptransport.BearerToken(os.Getenv("API_ACCESS_TOKEN")),
	)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		return append(diags, diag.Errorf("unexpected: %s", err)...)
	}

	responseData := resp.GetPayload()
	if responseData != nil {
		// FIXME
	}

	if errs := GetEdgeNode(ctx, d, m); err != nil {
		return append(diags, errs...)
	}

	d.Partial(false)

	return diags
}

func QueryEdgeNodes(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := device_config.NewQueryEdgeNodesParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	summaryVal, summaryIsSet := d.GetOk("summary")
	if summaryIsSet {
		params.Summary = summaryVal.(*bool)
	}

	client := m.(*client.Zedcloudapi)

	resp, err := client.DeviceConfig.QueryEdgeNodes(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	zschema.SetDeviceConfigResourceData(d, respModel)

	return diags
}

func Reboot(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	params := device_config.NewRebootParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	props := zschema.GetDeviceConfigPropertyFields()
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	// makes a bulk update for all properties that were changed
	client := m.(*client.Zedcloudapi)
	resp, err := client.DeviceConfig.Reboot(
		params,
		httptransport.BearerToken(os.Getenv("API_ACCESS_TOKEN")),
	)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		return append(diags, diag.Errorf("unexpected: %s", err)...)
	}

	responseData := resp.GetPayload()
	if responseData != nil {
		// FIXME
	}

	if errs := GetEdgeNode(ctx, d, m); err != nil {
		return append(diags, errs...)
	}

	d.Partial(false)

	return diags
}

func UpdateEdgeNode(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	params := device_config.NewUpdateEdgeNodeParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	params.SetBody(zschema.DeviceConfigModel(d))
	// models.DeviceConfig

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	props := zschema.GetDeviceConfigPropertyFields()
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	// makes a bulk update for all properties that were changed
	client := m.(*client.Zedcloudapi)
	resp, err := client.DeviceConfig.UpdateEdgeNode(
		params,
		httptransport.BearerToken(os.Getenv("API_ACCESS_TOKEN")),
	)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		return append(diags, diag.Errorf("unexpected: %s", err)...)
	}

	responseData := resp.GetPayload()
	if responseData != nil {
		// FIXME
	}

	if errs := GetEdgeNode(ctx, d, m); err != nil {
		return append(diags, errs...)
	}

	d.Partial(false)

	return diags
}

func UpdateEdgeNodeBaseOS(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	params := device_config.NewUpdateEdgeNodeBaseOSParams()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	props := zschema.GetDeviceConfigPropertyFields()
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	// makes a bulk update for all properties that were changed
	client := m.(*client.Zedcloudapi)
	resp, err := client.DeviceConfig.UpdateEdgeNodeBaseOS(
		params,
		httptransport.BearerToken(os.Getenv("API_ACCESS_TOKEN")),
	)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		return append(diags, diag.Errorf("unexpected: %s", err)...)
	}

	responseData := resp.GetPayload()
	if responseData != nil {
		// FIXME
	}

	if errs := GetEdgeNode(ctx, d, m); err != nil {
		return append(diags, errs...)
	}

	d.Partial(false)

	return diags
}

func UpdateEdgeNodeBaseOS2(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	params := device_config.NewUpdateEdgeNodeBaseOS2Params()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	props := zschema.GetDeviceConfigPropertyFields()
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	// makes a bulk update for all properties that were changed
	client := m.(*client.Zedcloudapi)
	resp, err := client.DeviceConfig.UpdateEdgeNodeBaseOS2(
		params,
		httptransport.BearerToken(os.Getenv("API_ACCESS_TOKEN")),
	)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		return append(diags, diag.Errorf("unexpected: %s", err)...)
	}

	responseData := resp.GetPayload()
	if responseData != nil {
		// FIXME
	}

	if errs := GetEdgeNode(ctx, d, m); err != nil {
		return append(diags, errs...)
	}

	d.Partial(false)

	return diags
}

func UpdateEdgeNodeBaseOS3(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	params := device_config.NewUpdateEdgeNodeBaseOS3Params()

	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
	if xRequestIdIsSet {
		params.XRequestID = xRequestIdVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := idVal.(string)
		params.ID = id
	} else {
		diags = append(diags, diag.Errorf("missing client parameter: id")...)
		return diags
	}

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	props := zschema.GetDeviceConfigPropertyFields()
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	// makes a bulk update for all properties that were changed
	client := m.(*client.Zedcloudapi)
	resp, err := client.DeviceConfig.UpdateEdgeNodeBaseOS3(
		params,
		httptransport.BearerToken(os.Getenv("API_ACCESS_TOKEN")),
	)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		return append(diags, diag.Errorf("unexpected: %s", err)...)
	}

	responseData := resp.GetPayload()
	if responseData != nil {
		// FIXME
	}

	if errs := GetEdgeNode(ctx, d, m); err != nil {
		return append(diags, errs...)
	}

	d.Partial(false)

	return diags
}
