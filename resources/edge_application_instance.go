// // Code generated by go-swagger; DO NOT EDIT.
package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func EdgeApplicationInstanceConfiguration() *schema.Resource {
	return &schema.Resource{
		/*
			UpdateContext: EdgeApplicationInstanceConfiguration_ActivateEdgeApplicationInstance,
			UpdateContext: EdgeApplicationInstanceConfiguration_ConnectToEdgeApplicationInstance,
			CreateContext: EdgeApplicationInstanceConfiguration_CreateEdgeApplicationInstance,
			UpdateContext: EdgeApplicationInstanceConfiguration_DeActivateEdgeApplicationInstance,
			DeleteContext: EdgeApplicationInstanceConfiguration_DeleteEdgeApplicationInstance,
			ReadContext: EdgeApplicationInstanceConfiguration_GetEdgeApplicationInstance,
			ReadContext: EdgeApplicationInstanceConfiguration_GetEdgeApplicationInstanceByName,
			ReadContext: EdgeApplicationInstanceConfiguration_QueryEdgeApplicationInstances,
			UpdateContext: EdgeApplicationInstanceConfiguration_RefreshEdgeApplicationInstance,
			UpdateContext: EdgeApplicationInstanceConfiguration_RefreshPurgeEdgeApplicationInstance,
			UpdateContext: EdgeApplicationInstanceConfiguration_RestartEdgeApplicationInstance,
			UpdateContext: EdgeApplicationInstanceConfiguration_UpdateEdgeApplicationInstance,
		*/
		// Schema: zschema.EdgeApplicationInstance(),
	}
}

func DataResourceEdgeApplicationInstanceConfiguration() *schema.Resource {
	return &schema.Resource{
		// ReadContext: ReadEdgeApplicationInstanceByName,
		// Schema: zschema.EdgeApplicationInstance(),
	}
}

// func ReadEdgeApplicationInstanceByName(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics

// 	params := edge_application_instance_configuration.NewEdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceByNameParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	nameVal, nameIsSet := d.GetOk("name")
// 	if nameIsSet {
// 		params.Name = nameVal.(string)
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: name")...)
// 		return diags
// 	}

// 	client := m.(*api_client.ZedcloudAPI)

// 	resp, err := client.EdgeApplicationInstance.EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceByName(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	respModel := resp.GetPayload()
// 	zschema.SetEdgeApplicationInstanceResourceData(d, respModel)

// 	return diags
// }

// func EdgeApplicationInstanceConfiguration_GetEdgeApplicationInstance(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics

// 	params := edge_application_instance_configuration.NewEdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	client := m.(*api_client.ZedcloudAPI)

// 	resp, err := client.EdgeApplicationInstance.EdgeApplicationInstanceConfigurationGetEdgeApplicationInstance(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	respModel := resp.GetPayload()
// 	zschema.SetApplicationInstanceResourceData(d, respModel)

// 	return diags
// }

// func EdgeApplicationInstanceConfiguration_QueryEdgeApplicationInstances(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics

// 	params := edge_application_instance_configuration.NewEdgeApplicationInstanceConfigurationQueryEdgeApplicationInstancesParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	fieldsVal, fieldsIsSet := d.GetOk("fields")
// 	if fieldsIsSet {
// 		params.Fields = fieldsVal.([]string)
// 	}

// 	filterAppNameVal, filterAppNameIsSet := d.GetOk("filter_app_name")
// 	if filterAppNameIsSet {
// 		params.FilterAppName = filterAppNameVal.(*string)
// 	}

// 	filterAppTypeVal, filterAppTypeIsSet := d.GetOk("filter_app_type")
// 	if filterAppTypeIsSet {
// 		params.FilterAppType = filterAppTypeVal.(*string)
// 	}

// 	filterDeploymentTypeVal, filterDeploymentTypeIsSet := d.GetOk("filter_deployment_type")
// 	if filterDeploymentTypeIsSet {
// 		params.FilterDeploymentType = filterDeploymentTypeVal.(*string)
// 	}

// 	filterDeviceNameVal, filterDeviceNameIsSet := d.GetOk("filter_device_name")
// 	if filterDeviceNameIsSet {
// 		params.FilterDeviceName = filterDeviceNameVal.(*string)
// 	}

// 	filterDeviceNamePatternVal, filterDeviceNamePatternIsSet := d.GetOk("filter_device_name_pattern")
// 	if filterDeviceNamePatternIsSet {
// 		params.FilterDeviceNamePattern = filterDeviceNamePatternVal.(*string)
// 	}

// 	filterNamePatternVal, filterNamePatternIsSet := d.GetOk("filter_name_pattern")
// 	if filterNamePatternIsSet {
// 		params.FilterNamePattern = filterNamePatternVal.(*string)
// 	}

// 	filterProjectNameVal, filterProjectNameIsSet := d.GetOk("filter_project_name")
// 	if filterProjectNameIsSet {
// 		params.FilterProjectName = filterProjectNameVal.(*string)
// 	}

// 	filterProjectNamePatternVal, filterProjectNamePatternIsSet := d.GetOk("filter_project_name_pattern")
// 	if filterProjectNamePatternIsSet {
// 		params.FilterProjectNamePattern = filterProjectNamePatternVal.(*string)
// 	}

// 	nextOrderByVal, nextOrderByIsSet := d.GetOk("next_order_by")
// 	if nextOrderByIsSet {
// 		params.NextOrderBy = nextOrderByVal.([]string)
// 	}

// 	nextPageNumVal, nextPageNumIsSet := d.GetOk("next_page_num")
// 	if nextPageNumIsSet {
// 		params.NextPageNum = nextPageNumVal.(*int64)
// 	}

// 	nextPageSizeVal, nextPageSizeIsSet := d.GetOk("next_page_size")
// 	if nextPageSizeIsSet {
// 		params.NextPageSize = nextPageSizeVal.(*int64)
// 	}

// 	nextPageTokenVal, nextPageTokenIsSet := d.GetOk("next_page_token")
// 	if nextPageTokenIsSet {
// 		params.NextPageToken = nextPageTokenVal.(*string)
// 	}

// 	nextTotalPagesVal, nextTotalPagesIsSet := d.GetOk("next_total_pages")
// 	if nextTotalPagesIsSet {
// 		params.NextTotalPages = nextTotalPagesVal.(*int64)
// 	}

// 	summaryVal, summaryIsSet := d.GetOk("summary")
// 	if summaryIsSet {
// 		params.Summary = summaryVal.(*bool)
// 	}

// 	client := m.(*api_client.ZedcloudAPI)

// 	resp, err := client.EdgeApplicationInstanceConfiguration.EdgeApplicationInstanceConfigurationQueryEdgeApplicationInstances(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	respModel := resp.GetPayload()
// 	zschema.SetEdgeApplicationInstanceConfigurationResourceData(d, respModel)

// 	return diags
// }

// func EdgeApplicationInstanceConfiguration_CreateEdgeApplicationInstance(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics

// 	model := zschema.EdgeApplicationInstanceConfigurationModel(d)
// 	params := edge_application_instance_configuration.NewEdgeApplicationInstanceConfigurationCreateEdgeApplicationInstanceParams()
// 	params.SetBody(model)

// 	client := m.(*apiclient.Zedcloudapi)

// 	resp, err := client.EdgeApplicationInstanceConfiguration.EdgeApplicationInstanceConfigurationCreateEdgeApplicationInstance(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
// 		return diags
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	return diags
// }

// func EdgeApplicationInstanceConfiguration_ActivateEdgeApplicationInstance(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_application_instance_configuration.NewEdgeApplicationInstanceConfigurationActivateEdgeApplicationInstanceParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeApplicationInstanceConfiguration.EdgeApplicationInstanceConfigurationActivateEdgeApplicationInstance(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeApplicationInstanceConfiguration_ConnectToEdgeApplicationInstance(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_application_instance_configuration.NewEdgeApplicationInstanceConfigurationConnectToEdgeApplicationInstanceParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeApplicationInstanceConfiguration.EdgeApplicationInstanceConfigurationConnectToEdgeApplicationInstance(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeApplicationInstanceConfiguration_DeActivateEdgeApplicationInstance(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_application_instance_configuration.NewEdgeApplicationInstanceConfigurationDeActivateEdgeApplicationInstanceParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeApplicationInstanceConfiguration.EdgeApplicationInstanceConfigurationDeActivateEdgeApplicationInstance(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeApplicationInstanceConfiguration_RefreshEdgeApplicationInstance(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_application_instance_configuration.NewEdgeApplicationInstanceConfigurationRefreshEdgeApplicationInstanceParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeApplicationInstanceConfiguration.EdgeApplicationInstanceConfigurationRefreshEdgeApplicationInstance(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeApplicationInstanceConfiguration_RefreshPurgeEdgeApplicationInstance(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_application_instance_configuration.NewEdgeApplicationInstanceConfigurationRefreshPurgeEdgeApplicationInstanceParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeApplicationInstanceConfiguration.EdgeApplicationInstanceConfigurationRefreshPurgeEdgeApplicationInstance(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeApplicationInstanceConfiguration_RestartEdgeApplicationInstance(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_application_instance_configuration.NewEdgeApplicationInstanceConfigurationRestartEdgeApplicationInstanceParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeApplicationInstanceConfiguration.EdgeApplicationInstanceConfigurationRestartEdgeApplicationInstance(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeApplicationInstanceConfiguration_UpdateEdgeApplicationInstance(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics
// 	d.Partial(true)

// 	params := edge_application_instance_configuration.NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	params.SetBody(zschema.EdgeApplicationInstanceConfigurationModel(d))
// 	// EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	// makes a bulk update for all properties that were changed
// 	client := m.(*apiclient.Zedcloudapi)
// 	resp, err := client.EdgeApplicationInstanceConfiguration.EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstance(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		return append(diags, diag.Errorf("unexpected: %s", err)...)
// 	}

// 	responseData := resp.GetPayload()
// 	if responseData != nil && len(responseData.Error) > 0 {
// 		for _, err := range responseData.Error {
// 			diags = append(diags, diag.FromErr(errors.New(err.Details))...)
// 		}
// 		return diags
// 	}

// 	// the zedcloud API does not return the partially updated object but a custom response.
// 	// thus, we need to fetch the object and populate the state.
// 	if errs := GetDevice(ctx, d, m); err != nil {
// 		return append(diags, errs...)
// 	}

// 	d.Partial(false)

// 	return diags
// }

// func EdgeApplicationInstanceConfiguration_DeleteEdgeApplicationInstance(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
// 	var diags diag.Diagnostics

// 	params := edge_application_instance_configuration.NewEdgeApplicationInstanceConfigurationDeleteEdgeApplicationInstanceParams()

// 	xRequestIdVal, xRequestIdIsSet := d.GetOk("x_request_id")
// 	if xRequestIdIsSet {
// 		params.XRequestID = xRequestIdVal.(*string)
// 	}

// 	idVal, idIsSet := d.GetOk("id")
// 	if idIsSet {
// 		id, _ := idVal.(string)
// 		params.ID = id
// 	} else {
// 		diags = append(diags, diag.Errorf("missing client parameter: id")...)
// 		return diags
// 	}

// 	client := m.(*apiclient.Zedcloudapi)

// 	resp, err := client.EdgeApplicationInstanceConfiguration.EdgeApplicationInstanceConfigurationDeleteEdgeApplicationInstance(params, nil)
// 	log.Printf("[TRACE] response: %v", resp)
// 	if err != nil {
// 		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
// 		return diags
// 	}

// 	d.SetId("")
// 	return diags
// }
