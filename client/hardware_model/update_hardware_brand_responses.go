// Code generated by go-swagger; DO NOT EDIT.

package hardware_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/terraform-provider/models"
)

// UpdateHardwareBrandReader is a Reader for the UpdateHardwareBrand structure.
type UpdateHardwareBrandReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateHardwareBrandReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateHardwareBrandOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateHardwareBrandUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateHardwareBrandForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateHardwareBrandNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateHardwareBrandConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateHardwareBrandInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewUpdateHardwareBrandGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateHardwareBrandOK creates a UpdateHardwareBrandOK with default headers values
func NewUpdateHardwareBrandOK() *UpdateHardwareBrandOK {
	return &UpdateHardwareBrandOK{}
}

/*
UpdateHardwareBrandOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateHardwareBrandOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this update hardware brand o k response has a 2xx status code
func (o *UpdateHardwareBrandOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update hardware brand o k response has a 3xx status code
func (o *UpdateHardwareBrandOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update hardware brand o k response has a 4xx status code
func (o *UpdateHardwareBrandOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update hardware brand o k response has a 5xx status code
func (o *UpdateHardwareBrandOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update hardware brand o k response a status code equal to that given
func (o *UpdateHardwareBrandOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateHardwareBrandOK) Error() string {
	return fmt.Sprintf("[PUT /v1/brands/id/{id}][%d] updateHardwareBrandOK  %+v", 200, o.Payload)
}

func (o *UpdateHardwareBrandOK) String() string {
	return fmt.Sprintf("[PUT /v1/brands/id/{id}][%d] updateHardwareBrandOK  %+v", 200, o.Payload)
}

func (o *UpdateHardwareBrandOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateHardwareBrandOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHardwareBrandUnauthorized creates a UpdateHardwareBrandUnauthorized with default headers values
func NewUpdateHardwareBrandUnauthorized() *UpdateHardwareBrandUnauthorized {
	return &UpdateHardwareBrandUnauthorized{}
}

/*
UpdateHardwareBrandUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type UpdateHardwareBrandUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this update hardware brand unauthorized response has a 2xx status code
func (o *UpdateHardwareBrandUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update hardware brand unauthorized response has a 3xx status code
func (o *UpdateHardwareBrandUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update hardware brand unauthorized response has a 4xx status code
func (o *UpdateHardwareBrandUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update hardware brand unauthorized response has a 5xx status code
func (o *UpdateHardwareBrandUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update hardware brand unauthorized response a status code equal to that given
func (o *UpdateHardwareBrandUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateHardwareBrandUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/brands/id/{id}][%d] updateHardwareBrandUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateHardwareBrandUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/brands/id/{id}][%d] updateHardwareBrandUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateHardwareBrandUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateHardwareBrandUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHardwareBrandForbidden creates a UpdateHardwareBrandForbidden with default headers values
func NewUpdateHardwareBrandForbidden() *UpdateHardwareBrandForbidden {
	return &UpdateHardwareBrandForbidden{}
}

/*
UpdateHardwareBrandForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type UpdateHardwareBrandForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this update hardware brand forbidden response has a 2xx status code
func (o *UpdateHardwareBrandForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update hardware brand forbidden response has a 3xx status code
func (o *UpdateHardwareBrandForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update hardware brand forbidden response has a 4xx status code
func (o *UpdateHardwareBrandForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update hardware brand forbidden response has a 5xx status code
func (o *UpdateHardwareBrandForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update hardware brand forbidden response a status code equal to that given
func (o *UpdateHardwareBrandForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateHardwareBrandForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/brands/id/{id}][%d] updateHardwareBrandForbidden  %+v", 403, o.Payload)
}

func (o *UpdateHardwareBrandForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/brands/id/{id}][%d] updateHardwareBrandForbidden  %+v", 403, o.Payload)
}

func (o *UpdateHardwareBrandForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateHardwareBrandForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHardwareBrandNotFound creates a UpdateHardwareBrandNotFound with default headers values
func NewUpdateHardwareBrandNotFound() *UpdateHardwareBrandNotFound {
	return &UpdateHardwareBrandNotFound{}
}

/*
UpdateHardwareBrandNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type UpdateHardwareBrandNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this update hardware brand not found response has a 2xx status code
func (o *UpdateHardwareBrandNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update hardware brand not found response has a 3xx status code
func (o *UpdateHardwareBrandNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update hardware brand not found response has a 4xx status code
func (o *UpdateHardwareBrandNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update hardware brand not found response has a 5xx status code
func (o *UpdateHardwareBrandNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update hardware brand not found response a status code equal to that given
func (o *UpdateHardwareBrandNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateHardwareBrandNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/brands/id/{id}][%d] updateHardwareBrandNotFound  %+v", 404, o.Payload)
}

func (o *UpdateHardwareBrandNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/brands/id/{id}][%d] updateHardwareBrandNotFound  %+v", 404, o.Payload)
}

func (o *UpdateHardwareBrandNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateHardwareBrandNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHardwareBrandConflict creates a UpdateHardwareBrandConflict with default headers values
func NewUpdateHardwareBrandConflict() *UpdateHardwareBrandConflict {
	return &UpdateHardwareBrandConflict{}
}

/*
UpdateHardwareBrandConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing hardware brand record.
*/
type UpdateHardwareBrandConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this update hardware brand conflict response has a 2xx status code
func (o *UpdateHardwareBrandConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update hardware brand conflict response has a 3xx status code
func (o *UpdateHardwareBrandConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update hardware brand conflict response has a 4xx status code
func (o *UpdateHardwareBrandConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update hardware brand conflict response has a 5xx status code
func (o *UpdateHardwareBrandConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update hardware brand conflict response a status code equal to that given
func (o *UpdateHardwareBrandConflict) IsCode(code int) bool {
	return code == 409
}

func (o *UpdateHardwareBrandConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/brands/id/{id}][%d] updateHardwareBrandConflict  %+v", 409, o.Payload)
}

func (o *UpdateHardwareBrandConflict) String() string {
	return fmt.Sprintf("[PUT /v1/brands/id/{id}][%d] updateHardwareBrandConflict  %+v", 409, o.Payload)
}

func (o *UpdateHardwareBrandConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateHardwareBrandConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHardwareBrandInternalServerError creates a UpdateHardwareBrandInternalServerError with default headers values
func NewUpdateHardwareBrandInternalServerError() *UpdateHardwareBrandInternalServerError {
	return &UpdateHardwareBrandInternalServerError{}
}

/*
UpdateHardwareBrandInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type UpdateHardwareBrandInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this update hardware brand internal server error response has a 2xx status code
func (o *UpdateHardwareBrandInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update hardware brand internal server error response has a 3xx status code
func (o *UpdateHardwareBrandInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update hardware brand internal server error response has a 4xx status code
func (o *UpdateHardwareBrandInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update hardware brand internal server error response has a 5xx status code
func (o *UpdateHardwareBrandInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update hardware brand internal server error response a status code equal to that given
func (o *UpdateHardwareBrandInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateHardwareBrandInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/brands/id/{id}][%d] updateHardwareBrandInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateHardwareBrandInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/brands/id/{id}][%d] updateHardwareBrandInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateHardwareBrandInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateHardwareBrandInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHardwareBrandGatewayTimeout creates a UpdateHardwareBrandGatewayTimeout with default headers values
func NewUpdateHardwareBrandGatewayTimeout() *UpdateHardwareBrandGatewayTimeout {
	return &UpdateHardwareBrandGatewayTimeout{}
}

/*
UpdateHardwareBrandGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type UpdateHardwareBrandGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this update hardware brand gateway timeout response has a 2xx status code
func (o *UpdateHardwareBrandGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update hardware brand gateway timeout response has a 3xx status code
func (o *UpdateHardwareBrandGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update hardware brand gateway timeout response has a 4xx status code
func (o *UpdateHardwareBrandGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this update hardware brand gateway timeout response has a 5xx status code
func (o *UpdateHardwareBrandGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this update hardware brand gateway timeout response a status code equal to that given
func (o *UpdateHardwareBrandGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *UpdateHardwareBrandGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/brands/id/{id}][%d] updateHardwareBrandGatewayTimeout  %+v", 504, o.Payload)
}

func (o *UpdateHardwareBrandGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/brands/id/{id}][%d] updateHardwareBrandGatewayTimeout  %+v", 504, o.Payload)
}

func (o *UpdateHardwareBrandGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateHardwareBrandGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
