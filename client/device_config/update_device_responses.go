// Code generated by go-swagger; DO NOT EDIT.

package device_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/terraform-provider/models"
)

// UpdateDeviceReader is a Reader for the UpdateDevice structure.
type UpdateDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateDeviceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateDeviceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDeviceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateDeviceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDeviceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewUpdateDeviceGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDeviceOK creates a UpdateDeviceOK with default headers values
func NewUpdateDeviceOK() *UpdateDeviceOK {
	return &UpdateDeviceOK{}
}

/*
UpdateDeviceOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateDeviceOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this update device o k response has a 2xx status code
func (o *UpdateDeviceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update device o k response has a 3xx status code
func (o *UpdateDeviceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update device o k response has a 4xx status code
func (o *UpdateDeviceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update device o k response has a 5xx status code
func (o *UpdateDeviceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update device o k response a status code equal to that given
func (o *UpdateDeviceOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateDeviceOK) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}][%d] updateDeviceOK  %+v", 200, o.Payload)
}

func (o *UpdateDeviceOK) String() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}][%d] updateDeviceOK  %+v", 200, o.Payload)
}

func (o *UpdateDeviceOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeviceUnauthorized creates a UpdateDeviceUnauthorized with default headers values
func NewUpdateDeviceUnauthorized() *UpdateDeviceUnauthorized {
	return &UpdateDeviceUnauthorized{}
}

/*
UpdateDeviceUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type UpdateDeviceUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this update device unauthorized response has a 2xx status code
func (o *UpdateDeviceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update device unauthorized response has a 3xx status code
func (o *UpdateDeviceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update device unauthorized response has a 4xx status code
func (o *UpdateDeviceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update device unauthorized response has a 5xx status code
func (o *UpdateDeviceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update device unauthorized response a status code equal to that given
func (o *UpdateDeviceUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateDeviceUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}][%d] updateDeviceUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateDeviceUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}][%d] updateDeviceUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateDeviceUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateDeviceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeviceForbidden creates a UpdateDeviceForbidden with default headers values
func NewUpdateDeviceForbidden() *UpdateDeviceForbidden {
	return &UpdateDeviceForbidden{}
}

/*
UpdateDeviceForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type UpdateDeviceForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this update device forbidden response has a 2xx status code
func (o *UpdateDeviceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update device forbidden response has a 3xx status code
func (o *UpdateDeviceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update device forbidden response has a 4xx status code
func (o *UpdateDeviceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update device forbidden response has a 5xx status code
func (o *UpdateDeviceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update device forbidden response a status code equal to that given
func (o *UpdateDeviceForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateDeviceForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}][%d] updateDeviceForbidden  %+v", 403, o.Payload)
}

func (o *UpdateDeviceForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}][%d] updateDeviceForbidden  %+v", 403, o.Payload)
}

func (o *UpdateDeviceForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateDeviceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeviceNotFound creates a UpdateDeviceNotFound with default headers values
func NewUpdateDeviceNotFound() *UpdateDeviceNotFound {
	return &UpdateDeviceNotFound{}
}

/*
UpdateDeviceNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type UpdateDeviceNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this update device not found response has a 2xx status code
func (o *UpdateDeviceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update device not found response has a 3xx status code
func (o *UpdateDeviceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update device not found response has a 4xx status code
func (o *UpdateDeviceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update device not found response has a 5xx status code
func (o *UpdateDeviceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update device not found response a status code equal to that given
func (o *UpdateDeviceNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateDeviceNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}][%d] updateDeviceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDeviceNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}][%d] updateDeviceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateDeviceNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateDeviceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeviceConflict creates a UpdateDeviceConflict with default headers values
func NewUpdateDeviceConflict() *UpdateDeviceConflict {
	return &UpdateDeviceConflict{}
}

/*
UpdateDeviceConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing device record.
*/
type UpdateDeviceConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this update device conflict response has a 2xx status code
func (o *UpdateDeviceConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update device conflict response has a 3xx status code
func (o *UpdateDeviceConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update device conflict response has a 4xx status code
func (o *UpdateDeviceConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update device conflict response has a 5xx status code
func (o *UpdateDeviceConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update device conflict response a status code equal to that given
func (o *UpdateDeviceConflict) IsCode(code int) bool {
	return code == 409
}

func (o *UpdateDeviceConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}][%d] updateDeviceConflict  %+v", 409, o.Payload)
}

func (o *UpdateDeviceConflict) String() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}][%d] updateDeviceConflict  %+v", 409, o.Payload)
}

func (o *UpdateDeviceConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateDeviceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeviceInternalServerError creates a UpdateDeviceInternalServerError with default headers values
func NewUpdateDeviceInternalServerError() *UpdateDeviceInternalServerError {
	return &UpdateDeviceInternalServerError{}
}

/*
UpdateDeviceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type UpdateDeviceInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this update device internal server error response has a 2xx status code
func (o *UpdateDeviceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update device internal server error response has a 3xx status code
func (o *UpdateDeviceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update device internal server error response has a 4xx status code
func (o *UpdateDeviceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update device internal server error response has a 5xx status code
func (o *UpdateDeviceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update device internal server error response a status code equal to that given
func (o *UpdateDeviceInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateDeviceInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}][%d] updateDeviceInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDeviceInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}][%d] updateDeviceInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateDeviceInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateDeviceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeviceGatewayTimeout creates a UpdateDeviceGatewayTimeout with default headers values
func NewUpdateDeviceGatewayTimeout() *UpdateDeviceGatewayTimeout {
	return &UpdateDeviceGatewayTimeout{}
}

/*
UpdateDeviceGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type UpdateDeviceGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this update device gateway timeout response has a 2xx status code
func (o *UpdateDeviceGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update device gateway timeout response has a 3xx status code
func (o *UpdateDeviceGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update device gateway timeout response has a 4xx status code
func (o *UpdateDeviceGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this update device gateway timeout response has a 5xx status code
func (o *UpdateDeviceGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this update device gateway timeout response a status code equal to that given
func (o *UpdateDeviceGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *UpdateDeviceGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}][%d] updateDeviceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *UpdateDeviceGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/devices/id/{id}][%d] updateDeviceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *UpdateDeviceGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateDeviceGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
