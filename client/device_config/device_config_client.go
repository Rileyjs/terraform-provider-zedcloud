// Code generated by go-swagger; DO NOT EDIT.

package device_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new device config API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for device config API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ActivateDevice(params *ActivateDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActivateDeviceOK, error)

	CreateDevice(params *CreateDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDeviceOK, error)

	DeActivateDevice(params *DeActivateDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeActivateDeviceOK, error)

	DeleteDevice(params *DeleteDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDeviceOK, error)

	GetDevice(params *GetDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceOK, error)

	GetDeviceAttestation(params *GetDeviceAttestationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceAttestationOK, error)

	GetDeviceByName(params *GetDeviceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceByNameOK, error)

	GetDeviceBySerial(params *GetDeviceBySerialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceBySerialOK, error)

	GetDeviceList(params *GetDeviceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceListOK, error)

	GetDeviceOnboarding(params *GetDeviceOnboardingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceOnboardingOK, error)

	Offboard(params *OffboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OffboardOK, error)

	Reboot(params *RebootParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RebootOK, error)

	UpdateDevice(params *UpdateDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceOK, error)

	UpdateDeviceBaseOS(params *UpdateDeviceBaseOSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceBaseOSOK, error)

	UpdateDeviceBaseOS2(params *UpdateDeviceBaseOS2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceBaseOS2OK, error)

	UpdateDeviceBaseOS3(params *UpdateDeviceBaseOS3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceBaseOS3OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ActivateDevice activates device

Activate an device. If already in active state no action is taken.
*/
func (a *Client) ActivateDevice(params *ActivateDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActivateDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivateDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActivateDevice",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivateDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivateDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ActivateDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDevice creates device

Create an device record.
*/
func (a *Client) CreateDevice(params *CreateDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDevice",
		Method:             "POST",
		PathPattern:        "/v1/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeActivateDevice deactivates device

Deactivate an device. If already in inactive state no action is taken.
*/
func (a *Client) DeActivateDevice(params *DeActivateDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeActivateDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeActivateDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeActivateDevice",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}/deactivate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeActivateDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeActivateDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeActivateDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDevice deletes device

Delete an device record.
*/
func (a *Client) DeleteDevice(params *DeleteDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDevice",
		Method:             "DELETE",
		PathPattern:        "/v1/devices/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDevice gets device

Get the configuration (without security details) of an device record.
*/
func (a *Client) GetDevice(params *GetDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDevice",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeviceAttestation gets device p c r attestation

Get the PCR attestation of an device record if present.
*/
func (a *Client) GetDeviceAttestation(params *GetDeviceAttestationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceAttestationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceAttestationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDeviceAttestation",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{id}/attestation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceAttestationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceAttestationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeviceAttestation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeviceByName gets device by name

Get the configuration (without security details) of an device record.
*/
func (a *Client) GetDeviceByName(params *GetDeviceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDeviceByName",
		Method:             "GET",
		PathPattern:        "/v1/devices/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeviceByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeviceBySerial gets device by serial number

Get the configuration (without security details) of an device record.
*/
func (a *Client) GetDeviceBySerial(params *GetDeviceBySerialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceBySerialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceBySerialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDeviceBySerial",
		Method:             "GET",
		PathPattern:        "/v1/devices/serial/{serialno}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceBySerialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceBySerialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeviceBySerial: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeviceList gets device list

Get list of existing devices.
*/
func (a *Client) GetDeviceList(params *GetDeviceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDeviceList",
		Method:             "GET",
		PathPattern:        "/v1/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeviceList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeviceOnboarding gets device onboarding certificate

Get the onboarding certificate of an device record if present, only valid for devices that have not been onboarded.
*/
func (a *Client) GetDeviceOnboarding(params *GetDeviceOnboardingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceOnboardingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceOnboardingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDeviceOnboarding",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{id}/onboarding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceOnboardingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceOnboardingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeviceOnboarding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Offboard offoards the edge ndoe

The API is used for offbaording the device from the enterprise
*/
func (a *Client) Offboard(params *OffboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OffboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOffboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Offboard",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}/Offboard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OffboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OffboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Offboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Reboot reboots device

Reboot an device remotely. This operation triggers reboot event. Please check bla-bla for device reboot status.
*/
func (a *Client) Reboot(params *RebootParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RebootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebootParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Reboot",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}/reboot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RebootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RebootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Reboot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDevice updates device

Update an device record. The usual pattern to update an device record is to retrieve the record and update with the modified values in a new body to update the device record.
*/
func (a *Client) UpdateDevice(params *UpdateDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDevice",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDeviceBaseOS updates e v e image on device

Update EVE image on device, if device is already running the latest EVE image no action is taken.
*/
func (a *Client) UpdateDeviceBaseOS(params *UpdateDeviceBaseOSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceBaseOSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceBaseOSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDeviceBaseOS",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceBaseOSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceBaseOSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDeviceBaseOS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDeviceBaseOS2 updates e v e image on device

Update EVE image on device, if device is already running the latest EVE image no action is taken.
*/
func (a *Client) UpdateDeviceBaseOS2(params *UpdateDeviceBaseOS2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceBaseOS2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceBaseOS2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDeviceBaseOS2",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}/publish",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceBaseOS2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceBaseOS2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDeviceBaseOS2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDeviceBaseOS3 updates e v e image on device

Update EVE image on device, if device is already running the latest EVE image no action is taken.
*/
func (a *Client) UpdateDeviceBaseOS3(params *UpdateDeviceBaseOS3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceBaseOS3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceBaseOS3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDeviceBaseOS3",
		Method:             "PUT",
		PathPattern:        "/v1/devices/id/{id}/unpublish",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceBaseOS3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceBaseOS3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDeviceBaseOS3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
