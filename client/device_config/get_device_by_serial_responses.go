// Code generated by go-swagger; DO NOT EDIT.

package device_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/terraform-provider/models"
)

// GetDeviceBySerialReader is a Reader for the GetDeviceBySerial structure.
type GetDeviceBySerialReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceBySerialReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeviceBySerialOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDeviceBySerialUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDeviceBySerialForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDeviceBySerialNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDeviceBySerialInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetDeviceBySerialGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDeviceBySerialOK creates a GetDeviceBySerialOK with default headers values
func NewGetDeviceBySerialOK() *GetDeviceBySerialOK {
	return &GetDeviceBySerialOK{}
}

/*
GetDeviceBySerialOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetDeviceBySerialOK struct {
	Payload *models.DeviceConfig
}

// IsSuccess returns true when this get device by serial o k response has a 2xx status code
func (o *GetDeviceBySerialOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get device by serial o k response has a 3xx status code
func (o *GetDeviceBySerialOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device by serial o k response has a 4xx status code
func (o *GetDeviceBySerialOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get device by serial o k response has a 5xx status code
func (o *GetDeviceBySerialOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get device by serial o k response a status code equal to that given
func (o *GetDeviceBySerialOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetDeviceBySerialOK) Error() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] getDeviceBySerialOK  %+v", 200, o.Payload)
}

func (o *GetDeviceBySerialOK) String() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] getDeviceBySerialOK  %+v", 200, o.Payload)
}

func (o *GetDeviceBySerialOK) GetPayload() *models.DeviceConfig {
	return o.Payload
}

func (o *GetDeviceBySerialOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeviceConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceBySerialUnauthorized creates a GetDeviceBySerialUnauthorized with default headers values
func NewGetDeviceBySerialUnauthorized() *GetDeviceBySerialUnauthorized {
	return &GetDeviceBySerialUnauthorized{}
}

/*
GetDeviceBySerialUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type GetDeviceBySerialUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this get device by serial unauthorized response has a 2xx status code
func (o *GetDeviceBySerialUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get device by serial unauthorized response has a 3xx status code
func (o *GetDeviceBySerialUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device by serial unauthorized response has a 4xx status code
func (o *GetDeviceBySerialUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get device by serial unauthorized response has a 5xx status code
func (o *GetDeviceBySerialUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get device by serial unauthorized response a status code equal to that given
func (o *GetDeviceBySerialUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetDeviceBySerialUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] getDeviceBySerialUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDeviceBySerialUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] getDeviceBySerialUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDeviceBySerialUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *GetDeviceBySerialUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceBySerialForbidden creates a GetDeviceBySerialForbidden with default headers values
func NewGetDeviceBySerialForbidden() *GetDeviceBySerialForbidden {
	return &GetDeviceBySerialForbidden{}
}

/*
GetDeviceBySerialForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type GetDeviceBySerialForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this get device by serial forbidden response has a 2xx status code
func (o *GetDeviceBySerialForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get device by serial forbidden response has a 3xx status code
func (o *GetDeviceBySerialForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device by serial forbidden response has a 4xx status code
func (o *GetDeviceBySerialForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get device by serial forbidden response has a 5xx status code
func (o *GetDeviceBySerialForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get device by serial forbidden response a status code equal to that given
func (o *GetDeviceBySerialForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetDeviceBySerialForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] getDeviceBySerialForbidden  %+v", 403, o.Payload)
}

func (o *GetDeviceBySerialForbidden) String() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] getDeviceBySerialForbidden  %+v", 403, o.Payload)
}

func (o *GetDeviceBySerialForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *GetDeviceBySerialForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceBySerialNotFound creates a GetDeviceBySerialNotFound with default headers values
func NewGetDeviceBySerialNotFound() *GetDeviceBySerialNotFound {
	return &GetDeviceBySerialNotFound{}
}

/*
GetDeviceBySerialNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type GetDeviceBySerialNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this get device by serial not found response has a 2xx status code
func (o *GetDeviceBySerialNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get device by serial not found response has a 3xx status code
func (o *GetDeviceBySerialNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device by serial not found response has a 4xx status code
func (o *GetDeviceBySerialNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get device by serial not found response has a 5xx status code
func (o *GetDeviceBySerialNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get device by serial not found response a status code equal to that given
func (o *GetDeviceBySerialNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetDeviceBySerialNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] getDeviceBySerialNotFound  %+v", 404, o.Payload)
}

func (o *GetDeviceBySerialNotFound) String() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] getDeviceBySerialNotFound  %+v", 404, o.Payload)
}

func (o *GetDeviceBySerialNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *GetDeviceBySerialNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceBySerialInternalServerError creates a GetDeviceBySerialInternalServerError with default headers values
func NewGetDeviceBySerialInternalServerError() *GetDeviceBySerialInternalServerError {
	return &GetDeviceBySerialInternalServerError{}
}

/*
GetDeviceBySerialInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type GetDeviceBySerialInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this get device by serial internal server error response has a 2xx status code
func (o *GetDeviceBySerialInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get device by serial internal server error response has a 3xx status code
func (o *GetDeviceBySerialInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device by serial internal server error response has a 4xx status code
func (o *GetDeviceBySerialInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get device by serial internal server error response has a 5xx status code
func (o *GetDeviceBySerialInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get device by serial internal server error response a status code equal to that given
func (o *GetDeviceBySerialInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetDeviceBySerialInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] getDeviceBySerialInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDeviceBySerialInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] getDeviceBySerialInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDeviceBySerialInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *GetDeviceBySerialInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceBySerialGatewayTimeout creates a GetDeviceBySerialGatewayTimeout with default headers values
func NewGetDeviceBySerialGatewayTimeout() *GetDeviceBySerialGatewayTimeout {
	return &GetDeviceBySerialGatewayTimeout{}
}

/*
GetDeviceBySerialGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type GetDeviceBySerialGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this get device by serial gateway timeout response has a 2xx status code
func (o *GetDeviceBySerialGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get device by serial gateway timeout response has a 3xx status code
func (o *GetDeviceBySerialGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device by serial gateway timeout response has a 4xx status code
func (o *GetDeviceBySerialGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get device by serial gateway timeout response has a 5xx status code
func (o *GetDeviceBySerialGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get device by serial gateway timeout response a status code equal to that given
func (o *GetDeviceBySerialGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetDeviceBySerialGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] getDeviceBySerialGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetDeviceBySerialGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] getDeviceBySerialGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetDeviceBySerialGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *GetDeviceBySerialGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
