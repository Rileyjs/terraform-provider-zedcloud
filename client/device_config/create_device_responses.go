// Code generated by go-swagger; DO NOT EDIT.

package device_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/terraform-provider/models"
)

// CreateDeviceReader is a Reader for the CreateDevice structure.
type CreateDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateDeviceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateDeviceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateDeviceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateDeviceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateDeviceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewCreateDeviceGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateDeviceOK creates a CreateDeviceOK with default headers values
func NewCreateDeviceOK() *CreateDeviceOK {
	return &CreateDeviceOK{}
}

/*
CreateDeviceOK describes a response with status code 200, with default header values.

A successful response.
*/
type CreateDeviceOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this create device o k response has a 2xx status code
func (o *CreateDeviceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create device o k response has a 3xx status code
func (o *CreateDeviceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create device o k response has a 4xx status code
func (o *CreateDeviceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create device o k response has a 5xx status code
func (o *CreateDeviceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create device o k response a status code equal to that given
func (o *CreateDeviceOK) IsCode(code int) bool {
	return code == 200
}

func (o *CreateDeviceOK) Error() string {
	return fmt.Sprintf("[POST /v1/devices][%d] createDeviceOK  %+v", 200, o.Payload)
}

func (o *CreateDeviceOK) String() string {
	return fmt.Sprintf("[POST /v1/devices][%d] createDeviceOK  %+v", 200, o.Payload)
}

func (o *CreateDeviceOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *CreateDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDeviceBadRequest creates a CreateDeviceBadRequest with default headers values
func NewCreateDeviceBadRequest() *CreateDeviceBadRequest {
	return &CreateDeviceBadRequest{}
}

/*
CreateDeviceBadRequest describes a response with status code 400, with default header values.

Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.
*/
type CreateDeviceBadRequest struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this create device bad request response has a 2xx status code
func (o *CreateDeviceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create device bad request response has a 3xx status code
func (o *CreateDeviceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create device bad request response has a 4xx status code
func (o *CreateDeviceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create device bad request response has a 5xx status code
func (o *CreateDeviceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create device bad request response a status code equal to that given
func (o *CreateDeviceBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateDeviceBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/devices][%d] createDeviceBadRequest  %+v", 400, o.Payload)
}

func (o *CreateDeviceBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/devices][%d] createDeviceBadRequest  %+v", 400, o.Payload)
}

func (o *CreateDeviceBadRequest) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *CreateDeviceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDeviceUnauthorized creates a CreateDeviceUnauthorized with default headers values
func NewCreateDeviceUnauthorized() *CreateDeviceUnauthorized {
	return &CreateDeviceUnauthorized{}
}

/*
CreateDeviceUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type CreateDeviceUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this create device unauthorized response has a 2xx status code
func (o *CreateDeviceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create device unauthorized response has a 3xx status code
func (o *CreateDeviceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create device unauthorized response has a 4xx status code
func (o *CreateDeviceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create device unauthorized response has a 5xx status code
func (o *CreateDeviceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create device unauthorized response a status code equal to that given
func (o *CreateDeviceUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CreateDeviceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/devices][%d] createDeviceUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateDeviceUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/devices][%d] createDeviceUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateDeviceUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *CreateDeviceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDeviceForbidden creates a CreateDeviceForbidden with default headers values
func NewCreateDeviceForbidden() *CreateDeviceForbidden {
	return &CreateDeviceForbidden{}
}

/*
CreateDeviceForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type CreateDeviceForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this create device forbidden response has a 2xx status code
func (o *CreateDeviceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create device forbidden response has a 3xx status code
func (o *CreateDeviceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create device forbidden response has a 4xx status code
func (o *CreateDeviceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create device forbidden response has a 5xx status code
func (o *CreateDeviceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create device forbidden response a status code equal to that given
func (o *CreateDeviceForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateDeviceForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/devices][%d] createDeviceForbidden  %+v", 403, o.Payload)
}

func (o *CreateDeviceForbidden) String() string {
	return fmt.Sprintf("[POST /v1/devices][%d] createDeviceForbidden  %+v", 403, o.Payload)
}

func (o *CreateDeviceForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *CreateDeviceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDeviceConflict creates a CreateDeviceConflict with default headers values
func NewCreateDeviceConflict() *CreateDeviceConflict {
	return &CreateDeviceConflict{}
}

/*
CreateDeviceConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this device record will conflict with an already existing device record.
*/
type CreateDeviceConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this create device conflict response has a 2xx status code
func (o *CreateDeviceConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create device conflict response has a 3xx status code
func (o *CreateDeviceConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create device conflict response has a 4xx status code
func (o *CreateDeviceConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create device conflict response has a 5xx status code
func (o *CreateDeviceConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create device conflict response a status code equal to that given
func (o *CreateDeviceConflict) IsCode(code int) bool {
	return code == 409
}

func (o *CreateDeviceConflict) Error() string {
	return fmt.Sprintf("[POST /v1/devices][%d] createDeviceConflict  %+v", 409, o.Payload)
}

func (o *CreateDeviceConflict) String() string {
	return fmt.Sprintf("[POST /v1/devices][%d] createDeviceConflict  %+v", 409, o.Payload)
}

func (o *CreateDeviceConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *CreateDeviceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDeviceInternalServerError creates a CreateDeviceInternalServerError with default headers values
func NewCreateDeviceInternalServerError() *CreateDeviceInternalServerError {
	return &CreateDeviceInternalServerError{}
}

/*
CreateDeviceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type CreateDeviceInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this create device internal server error response has a 2xx status code
func (o *CreateDeviceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create device internal server error response has a 3xx status code
func (o *CreateDeviceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create device internal server error response has a 4xx status code
func (o *CreateDeviceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create device internal server error response has a 5xx status code
func (o *CreateDeviceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create device internal server error response a status code equal to that given
func (o *CreateDeviceInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateDeviceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/devices][%d] createDeviceInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateDeviceInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/devices][%d] createDeviceInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateDeviceInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *CreateDeviceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateDeviceGatewayTimeout creates a CreateDeviceGatewayTimeout with default headers values
func NewCreateDeviceGatewayTimeout() *CreateDeviceGatewayTimeout {
	return &CreateDeviceGatewayTimeout{}
}

/*
CreateDeviceGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type CreateDeviceGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this create device gateway timeout response has a 2xx status code
func (o *CreateDeviceGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create device gateway timeout response has a 3xx status code
func (o *CreateDeviceGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create device gateway timeout response has a 4xx status code
func (o *CreateDeviceGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this create device gateway timeout response has a 5xx status code
func (o *CreateDeviceGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this create device gateway timeout response a status code equal to that given
func (o *CreateDeviceGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *CreateDeviceGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /v1/devices][%d] createDeviceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *CreateDeviceGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /v1/devices][%d] createDeviceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *CreateDeviceGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *CreateDeviceGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
