// Code generated by go-swagger; DO NOT EDIT.

package device_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/terraform-provider/models"
)

// GetDeviceEventsListByNameReader is a Reader for the GetDeviceEventsListByName structure.
type GetDeviceEventsListByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceEventsListByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeviceEventsListByNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDeviceEventsListByNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDeviceEventsListByNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDeviceEventsListByNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDeviceEventsListByNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewGetDeviceEventsListByNameGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDeviceEventsListByNameOK creates a GetDeviceEventsListByNameOK with default headers values
func NewGetDeviceEventsListByNameOK() *GetDeviceEventsListByNameOK {
	return &GetDeviceEventsListByNameOK{}
}

/*
GetDeviceEventsListByNameOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetDeviceEventsListByNameOK struct {
	Payload *models.EventQueryResponse
}

// IsSuccess returns true when this get device events list by name o k response has a 2xx status code
func (o *GetDeviceEventsListByNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get device events list by name o k response has a 3xx status code
func (o *GetDeviceEventsListByNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device events list by name o k response has a 4xx status code
func (o *GetDeviceEventsListByNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get device events list by name o k response has a 5xx status code
func (o *GetDeviceEventsListByNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get device events list by name o k response a status code equal to that given
func (o *GetDeviceEventsListByNameOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetDeviceEventsListByNameOK) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] getDeviceEventsListByNameOK  %+v", 200, o.Payload)
}

func (o *GetDeviceEventsListByNameOK) String() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] getDeviceEventsListByNameOK  %+v", 200, o.Payload)
}

func (o *GetDeviceEventsListByNameOK) GetPayload() *models.EventQueryResponse {
	return o.Payload
}

func (o *GetDeviceEventsListByNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EventQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceEventsListByNameUnauthorized creates a GetDeviceEventsListByNameUnauthorized with default headers values
func NewGetDeviceEventsListByNameUnauthorized() *GetDeviceEventsListByNameUnauthorized {
	return &GetDeviceEventsListByNameUnauthorized{}
}

/*
GetDeviceEventsListByNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type GetDeviceEventsListByNameUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this get device events list by name unauthorized response has a 2xx status code
func (o *GetDeviceEventsListByNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get device events list by name unauthorized response has a 3xx status code
func (o *GetDeviceEventsListByNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device events list by name unauthorized response has a 4xx status code
func (o *GetDeviceEventsListByNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get device events list by name unauthorized response has a 5xx status code
func (o *GetDeviceEventsListByNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get device events list by name unauthorized response a status code equal to that given
func (o *GetDeviceEventsListByNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetDeviceEventsListByNameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] getDeviceEventsListByNameUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDeviceEventsListByNameUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] getDeviceEventsListByNameUnauthorized  %+v", 401, o.Payload)
}

func (o *GetDeviceEventsListByNameUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *GetDeviceEventsListByNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceEventsListByNameForbidden creates a GetDeviceEventsListByNameForbidden with default headers values
func NewGetDeviceEventsListByNameForbidden() *GetDeviceEventsListByNameForbidden {
	return &GetDeviceEventsListByNameForbidden{}
}

/*
GetDeviceEventsListByNameForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type GetDeviceEventsListByNameForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this get device events list by name forbidden response has a 2xx status code
func (o *GetDeviceEventsListByNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get device events list by name forbidden response has a 3xx status code
func (o *GetDeviceEventsListByNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device events list by name forbidden response has a 4xx status code
func (o *GetDeviceEventsListByNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get device events list by name forbidden response has a 5xx status code
func (o *GetDeviceEventsListByNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get device events list by name forbidden response a status code equal to that given
func (o *GetDeviceEventsListByNameForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetDeviceEventsListByNameForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] getDeviceEventsListByNameForbidden  %+v", 403, o.Payload)
}

func (o *GetDeviceEventsListByNameForbidden) String() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] getDeviceEventsListByNameForbidden  %+v", 403, o.Payload)
}

func (o *GetDeviceEventsListByNameForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *GetDeviceEventsListByNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceEventsListByNameNotFound creates a GetDeviceEventsListByNameNotFound with default headers values
func NewGetDeviceEventsListByNameNotFound() *GetDeviceEventsListByNameNotFound {
	return &GetDeviceEventsListByNameNotFound{}
}

/*
GetDeviceEventsListByNameNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type GetDeviceEventsListByNameNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this get device events list by name not found response has a 2xx status code
func (o *GetDeviceEventsListByNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get device events list by name not found response has a 3xx status code
func (o *GetDeviceEventsListByNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device events list by name not found response has a 4xx status code
func (o *GetDeviceEventsListByNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get device events list by name not found response has a 5xx status code
func (o *GetDeviceEventsListByNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get device events list by name not found response a status code equal to that given
func (o *GetDeviceEventsListByNameNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetDeviceEventsListByNameNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] getDeviceEventsListByNameNotFound  %+v", 404, o.Payload)
}

func (o *GetDeviceEventsListByNameNotFound) String() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] getDeviceEventsListByNameNotFound  %+v", 404, o.Payload)
}

func (o *GetDeviceEventsListByNameNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *GetDeviceEventsListByNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceEventsListByNameInternalServerError creates a GetDeviceEventsListByNameInternalServerError with default headers values
func NewGetDeviceEventsListByNameInternalServerError() *GetDeviceEventsListByNameInternalServerError {
	return &GetDeviceEventsListByNameInternalServerError{}
}

/*
GetDeviceEventsListByNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type GetDeviceEventsListByNameInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this get device events list by name internal server error response has a 2xx status code
func (o *GetDeviceEventsListByNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get device events list by name internal server error response has a 3xx status code
func (o *GetDeviceEventsListByNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device events list by name internal server error response has a 4xx status code
func (o *GetDeviceEventsListByNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get device events list by name internal server error response has a 5xx status code
func (o *GetDeviceEventsListByNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get device events list by name internal server error response a status code equal to that given
func (o *GetDeviceEventsListByNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetDeviceEventsListByNameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] getDeviceEventsListByNameInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDeviceEventsListByNameInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] getDeviceEventsListByNameInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDeviceEventsListByNameInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *GetDeviceEventsListByNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeviceEventsListByNameGatewayTimeout creates a GetDeviceEventsListByNameGatewayTimeout with default headers values
func NewGetDeviceEventsListByNameGatewayTimeout() *GetDeviceEventsListByNameGatewayTimeout {
	return &GetDeviceEventsListByNameGatewayTimeout{}
}

/*
GetDeviceEventsListByNameGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type GetDeviceEventsListByNameGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this get device events list by name gateway timeout response has a 2xx status code
func (o *GetDeviceEventsListByNameGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get device events list by name gateway timeout response has a 3xx status code
func (o *GetDeviceEventsListByNameGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device events list by name gateway timeout response has a 4xx status code
func (o *GetDeviceEventsListByNameGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this get device events list by name gateway timeout response has a 5xx status code
func (o *GetDeviceEventsListByNameGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this get device events list by name gateway timeout response a status code equal to that given
func (o *GetDeviceEventsListByNameGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *GetDeviceEventsListByNameGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] getDeviceEventsListByNameGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetDeviceEventsListByNameGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] getDeviceEventsListByNameGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetDeviceEventsListByNameGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *GetDeviceEventsListByNameGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
