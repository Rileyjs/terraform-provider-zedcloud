// Code generated by go-swagger; DO NOT EDIT.

package device_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new device status API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for device status API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetDeviceEventsListByID(params *GetDeviceEventsListByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceEventsListByIDOK, error)

	GetDeviceEventsListByName(params *GetDeviceEventsListByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceEventsListByNameOK, error)

	GetDeviceResourceMetricsByID(params *GetDeviceResourceMetricsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceResourceMetricsByIDOK, error)

	GetDeviceResourceMetricsByName(params *GetDeviceResourceMetricsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceResourceMetricsByNameOK, error)

	GetDeviceStatusByID(params *GetDeviceStatusByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceStatusByIDOK, error)

	GetDeviceStatusByName(params *GetDeviceStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceStatusByNameOK, error)

	QueryDeviceStatus(params *QueryDeviceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryDeviceStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetDeviceEventsListByID gets device events by id

Get configuration and status events of an device by id.
*/
func (a *Client) GetDeviceEventsListByID(params *GetDeviceEventsListByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceEventsListByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceEventsListByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDeviceEventsListByID",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{objid}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceEventsListByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceEventsListByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeviceEventsListByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeviceEventsListByName gets device events by id

Get configuration and status events of an device by id.
*/
func (a *Client) GetDeviceEventsListByName(params *GetDeviceEventsListByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceEventsListByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceEventsListByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDeviceEventsListByName",
		Method:             "GET",
		PathPattern:        "/v1/devices/name/{objname}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceEventsListByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceEventsListByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeviceEventsListByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeviceResourceMetricsByID gets device resource usage timeline

Get the resource usage timeline of an device
*/
func (a *Client) GetDeviceResourceMetricsByID(params *GetDeviceResourceMetricsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceResourceMetricsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceResourceMetricsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDeviceResourceMetricsById",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{objid}/timeSeries/{mType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceResourceMetricsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceResourceMetricsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeviceResourceMetricsById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeviceResourceMetricsByName gets device resource usage timeline

Get the resource usage timeline of an device
*/
func (a *Client) GetDeviceResourceMetricsByName(params *GetDeviceResourceMetricsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceResourceMetricsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceResourceMetricsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDeviceResourceMetricsByName",
		Method:             "GET",
		PathPattern:        "/v1/devices/name/{objname}/timeSeries/{mType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceResourceMetricsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceResourceMetricsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeviceResourceMetricsByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeviceStatusByID gets device status

Get the status of an device as reported by the device itself
*/
func (a *Client) GetDeviceStatusByID(params *GetDeviceStatusByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceStatusByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceStatusByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDeviceStatusByID",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceStatusByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceStatusByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeviceStatusByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeviceStatusByName gets device status

Get the status of an device as reported by the device itself
*/
func (a *Client) GetDeviceStatusByName(params *GetDeviceStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceStatusByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceStatusByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDeviceStatusByName",
		Method:             "GET",
		PathPattern:        "/v1/devices/name/{name}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceStatusByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceStatusByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeviceStatusByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryDeviceStatus queries status of devices

Query the status of devices as reported by the devices themselves
*/
func (a *Client) QueryDeviceStatus(params *QueryDeviceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryDeviceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryDeviceStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryDeviceStatus",
		Method:             "GET",
		PathPattern:        "/v1/devices/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryDeviceStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryDeviceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryDeviceStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
